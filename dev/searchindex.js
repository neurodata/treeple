Search.setIndex({"docnames": ["api", "auto_examples/calibration/index", "auto_examples/calibration/plot_honest_tree", "auto_examples/calibration/plot_overlapping_gaussians", "auto_examples/calibration/sg_execution_times", "auto_examples/index", "auto_examples/multiview/index", "auto_examples/multiview/plot_multiview_dtc", "auto_examples/multiview/sg_execution_times", "auto_examples/outlier_detection/index", "auto_examples/outlier_detection/plot_extended_isolation_forest", "auto_examples/outlier_detection/sg_execution_times", "auto_examples/quantile_predictions/index", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest", "auto_examples/quantile_predictions/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/sklearn_vs_treeple/index", "auto_examples/sklearn_vs_treeple/plot_iris_dtc", "auto_examples/sklearn_vs_treeple/sg_execution_times", "auto_examples/sparse_oblique_trees/index", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest", "auto_examples/sparse_oblique_trees/sg_execution_times", "auto_examples/splitters/index", "auto_examples/splitters/plot_multiview_axis_aligned_splitter", "auto_examples/splitters/plot_projection_matrices", "auto_examples/splitters/plot_sparse_projection_matrix", "auto_examples/splitters/sg_execution_times", "auto_examples/treeple/index", "auto_examples/treeple/sg_execution_times", "auto_examples/treeple/treeple_tutorial_0_GMM", "auto_examples/treeple/treeple_tutorial_1_1a_SA98", "auto_examples/treeple/treeple_tutorial_1_1b_MI", "auto_examples/treeple/treeple_tutorial_1_1c_pAUC", "auto_examples/treeple/treeple_tutorial_1_1d_HD", "auto_examples/treeple/treeple_tutorial_1_2_pvalue", "auto_examples/treeple/treeple_tutorial_2_1a_SA98_multiview", "auto_examples/treeple/treeple_tutorial_2_1b_CMI", "auto_examples/treeple/treeple_tutorial_2_2_pvalue_multiview", "generated/treeple.ExtendedIsolationForest", "generated/treeple.ExtraTreesClassifier", "generated/treeple.ExtraTreesRegressor", "generated/treeple.HonestForestClassifier", "generated/treeple.MultiViewRandomForestClassifier", "generated/treeple.NearestNeighborsMetaEstimator", "generated/treeple.ObliqueRandomForestClassifier", "generated/treeple.ObliqueRandomForestRegressor", "generated/treeple.PatchObliqueRandomForestClassifier", "generated/treeple.PatchObliqueRandomForestRegressor", "generated/treeple.RandomForestClassifier", "generated/treeple.RandomForestRegressor", "generated/treeple.UnsupervisedObliqueRandomForest", "generated/treeple.UnsupervisedRandomForest", "generated/treeple.datasets.approximate_clf_mutual_information", "generated/treeple.datasets.approximate_clf_mutual_information_with_monte_carlo", "generated/treeple.datasets.make_gaussian_mixture", "generated/treeple.datasets.make_joint_factor_model", "generated/treeple.datasets.make_marron_wand_classification", "generated/treeple.datasets.make_quadratic_classification", "generated/treeple.datasets.make_trunk_classification", "generated/treeple.datasets.make_trunk_mixture_classification", "generated/treeple.experimental.conditional_resample", "generated/treeple.experimental.mutual_info.cmi_gaussian", "generated/treeple.experimental.mutual_info.entropy_gaussian", "generated/treeple.experimental.mutual_info.mi_gaussian", "generated/treeple.experimental.mutual_info_ksg", "generated/treeple.experimental.simulate.simulate_helix", "generated/treeple.experimental.simulate.simulate_multivariate_gaussian", "generated/treeple.experimental.simulate.simulate_sphere", "generated/treeple.stats.PermutationHonestForestClassifier", "generated/treeple.stats.build_coleman_forest", "generated/treeple.stats.build_cv_forest", "generated/treeple.stats.build_oob_forest", "generated/treeple.stats.build_permutation_forest", "generated/treeple.tree.DecisionTreeClassifier", "generated/treeple.tree.DecisionTreeRegressor", "generated/treeple.tree.ExtraTreeClassifier", "generated/treeple.tree.ExtraTreeRegressor", "generated/treeple.tree.HonestTreeClassifier", "generated/treeple.tree.MultiViewDecisionTreeClassifier", "generated/treeple.tree.ObliqueDecisionTreeClassifier", "generated/treeple.tree.ObliqueDecisionTreeRegressor", "generated/treeple.tree.PatchObliqueDecisionTreeClassifier", "generated/treeple.tree.PatchObliqueDecisionTreeRegressor", "generated/treeple.tree.UnsupervisedDecisionTree", "generated/treeple.tree.UnsupervisedObliqueDecisionTree", "generated/treeple.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "sg_execution_times", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.10", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7", "whats_new/v0.8", "whats_new/v0.9"], "filenames": ["api.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_honest_tree.rst", "auto_examples/calibration/plot_overlapping_gaussians.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/multiview/index.rst", "auto_examples/multiview/plot_multiview_dtc.rst", "auto_examples/multiview/sg_execution_times.rst", "auto_examples/outlier_detection/index.rst", "auto_examples/outlier_detection/plot_extended_isolation_forest.rst", "auto_examples/outlier_detection/sg_execution_times.rst", "auto_examples/quantile_predictions/index.rst", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest.rst", "auto_examples/quantile_predictions/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/sklearn_vs_treeple/index.rst", "auto_examples/sklearn_vs_treeple/plot_iris_dtc.rst", "auto_examples/sklearn_vs_treeple/sg_execution_times.rst", "auto_examples/sparse_oblique_trees/index.rst", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size.rst", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris.rst", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/sg_execution_times.rst", "auto_examples/splitters/index.rst", "auto_examples/splitters/plot_multiview_axis_aligned_splitter.rst", "auto_examples/splitters/plot_projection_matrices.rst", "auto_examples/splitters/plot_sparse_projection_matrix.rst", "auto_examples/splitters/sg_execution_times.rst", "auto_examples/treeple/index.rst", "auto_examples/treeple/sg_execution_times.rst", "auto_examples/treeple/treeple_tutorial_0_GMM.rst", "auto_examples/treeple/treeple_tutorial_1_1a_SA98.rst", "auto_examples/treeple/treeple_tutorial_1_1b_MI.rst", "auto_examples/treeple/treeple_tutorial_1_1c_pAUC.rst", "auto_examples/treeple/treeple_tutorial_1_1d_HD.rst", "auto_examples/treeple/treeple_tutorial_1_2_pvalue.rst", "auto_examples/treeple/treeple_tutorial_2_1a_SA98_multiview.rst", "auto_examples/treeple/treeple_tutorial_2_1b_CMI.rst", "auto_examples/treeple/treeple_tutorial_2_2_pvalue_multiview.rst", "generated/treeple.ExtendedIsolationForest.rst", "generated/treeple.ExtraTreesClassifier.rst", "generated/treeple.ExtraTreesRegressor.rst", "generated/treeple.HonestForestClassifier.rst", "generated/treeple.MultiViewRandomForestClassifier.rst", "generated/treeple.NearestNeighborsMetaEstimator.rst", "generated/treeple.ObliqueRandomForestClassifier.rst", "generated/treeple.ObliqueRandomForestRegressor.rst", "generated/treeple.PatchObliqueRandomForestClassifier.rst", "generated/treeple.PatchObliqueRandomForestRegressor.rst", "generated/treeple.RandomForestClassifier.rst", "generated/treeple.RandomForestRegressor.rst", "generated/treeple.UnsupervisedObliqueRandomForest.rst", "generated/treeple.UnsupervisedRandomForest.rst", "generated/treeple.datasets.approximate_clf_mutual_information.rst", "generated/treeple.datasets.approximate_clf_mutual_information_with_monte_carlo.rst", "generated/treeple.datasets.make_gaussian_mixture.rst", "generated/treeple.datasets.make_joint_factor_model.rst", "generated/treeple.datasets.make_marron_wand_classification.rst", "generated/treeple.datasets.make_quadratic_classification.rst", "generated/treeple.datasets.make_trunk_classification.rst", "generated/treeple.datasets.make_trunk_mixture_classification.rst", "generated/treeple.experimental.conditional_resample.rst", "generated/treeple.experimental.mutual_info.cmi_gaussian.rst", "generated/treeple.experimental.mutual_info.entropy_gaussian.rst", "generated/treeple.experimental.mutual_info.mi_gaussian.rst", "generated/treeple.experimental.mutual_info_ksg.rst", "generated/treeple.experimental.simulate.simulate_helix.rst", "generated/treeple.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/treeple.experimental.simulate.simulate_sphere.rst", "generated/treeple.stats.PermutationHonestForestClassifier.rst", "generated/treeple.stats.build_coleman_forest.rst", "generated/treeple.stats.build_cv_forest.rst", "generated/treeple.stats.build_oob_forest.rst", "generated/treeple.stats.build_permutation_forest.rst", "generated/treeple.tree.DecisionTreeClassifier.rst", "generated/treeple.tree.DecisionTreeRegressor.rst", "generated/treeple.tree.ExtraTreeClassifier.rst", "generated/treeple.tree.ExtraTreeRegressor.rst", "generated/treeple.tree.HonestTreeClassifier.rst", "generated/treeple.tree.MultiViewDecisionTreeClassifier.rst", "generated/treeple.tree.ObliqueDecisionTreeClassifier.rst", "generated/treeple.tree.ObliqueDecisionTreeRegressor.rst", "generated/treeple.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/treeple.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/treeple.tree.UnsupervisedDecisionTree.rst", "generated/treeple.tree.UnsupervisedObliqueDecisionTree.rst", "generated/treeple.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "sg_execution_times.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.10.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst", "whats_new/v0.8.rst", "whats_new/v0.9.rst"], "titles": ["API Documentation", "Calibrated decision trees via honesty", "Comparison of Decision Tree and Honest Tree", "Plot honest forest calibrations on overlapping gaussian simulations", "Computation times", "Examples", "Multi-view learning with Decision-trees", "Analyze a multi-view dataset with a multi-view random forest", "Computation times", "Outlier-detection", "ExtendedIsolationForest example", "Computation times", "Quantile Predictions with Random Forest", "Predicting with different quantile interpolation methods", "Quantile prediction intervals with Random Forest Regressor", "Quantile prediction with Random Forest Regressor class", "Quantile regression with oblique regression forest", "Computation times", "Computation times", "Comparing sklearn and treeple decision trees", "Plot the decision surface of decision trees trained on the iris dataset", "Computation times", "Sparse oblique projections with oblique decision-trees", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "Decision-tree splitters", "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree", "Plot the projection matrices of an oblique tree for sampling images, or time-series", "Plot the sparse projection matrices of an oblique tree", "Computation times", "Treeple for Hypothesis Testing", "Computation times", "Estimating true posteriors &amp; statistics", "Calculating S&#64;98", "Calculating MI", "Calculating pAUC", "Calculating Hellinger Distance", "Calculating p-value (MIGHT)", "Calculating S&#64;98 with multiview data", "Calculating CMI", "Calculating p-value with multiview data (CoMIGHT)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.ExtendedIsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.MultiViewRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple</span></code>.UnsupervisedRandomForest", "treeple.datasets.approximate_clf_mutual_information", "treeple.datasets.approximate_clf_mutual_information_with_monte_carlo", "treeple.datasets.make_gaussian_mixture", "treeple.datasets.make_joint_factor_model", "treeple.datasets.make_marron_wand_classification", "treeple.datasets.make_quadratic_classification", "treeple.datasets.make_trunk_classification", "treeple.datasets.make_trunk_mixture_classification", "treeple.experimental.conditional_resample", "treeple.experimental.mutual_info.cmi_gaussian", "treeple.experimental.mutual_info.entropy_gaussian", "treeple.experimental.mutual_info.mi_gaussian", "treeple.experimental.mutual_info_ksg", "treeple.experimental.simulate.simulate_helix", "treeple.experimental.simulate.simulate_multivariate_gaussian", "treeple.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.stats</span></code>.PermutationHonestForestClassifier", "treeple.stats.build_coleman_forest", "treeple.stats.build_cv_forest", "treeple.stats.build_oob_forest", "treeple.stats.build_permutation_forest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.MultiViewDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">treeple.tree</span></code>.UnsupervisedObliqueDecisionTree", "treeple.tree.compute_forest_similarity_matrix", "<strong>treeple</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Computation times", "Examples using treeple", "User guide: contents", "Release History", "&lt;no title&gt;", "Version 0.1", "Version 0.10", "Version 0.2", "Version 0.3", "Version 0.4", "Version 0.5", "Version 0.6", "Version 0.7", "Version 0.8", "Version 0.9"], "terms": {"treepl": [0, 2, 3, 7, 10, 13, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 94, 95, 96, 98, 101, 104, 107, 108, 109, 110, 111, 112], "manifold": [0, 31, 53, 54, 88, 89, 93, 95, 103], "obliqu": [0, 12, 17, 20, 28, 29, 33, 49, 51, 52, 53, 54, 57, 85, 86, 87, 88, 89, 91, 93, 94, 98, 100, 103, 105], "random": [0, 3, 6, 8, 10, 16, 17, 22, 26, 28, 30, 31, 32, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 98, 100, 103, 106, 110], "forest": [0, 1, 2, 4, 6, 8, 13, 17, 22, 26, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 100, 103, 104, 105, 106, 107, 110], "we": [0, 2, 3, 7, 10, 13, 14, 16, 20, 26, 30, 31, 32, 36, 41, 44, 45, 48, 67, 68, 72, 93, 94, 95, 96, 97, 105, 106, 110], "provid": [0, 2, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "drop": [0, 13, 14, 15, 16, 23, 24, 25, 27, 96], "replac": [0, 42, 43, 44, 45, 48, 67, 95, 112], "featur": [0, 7, 13, 16, 20, 23, 24, 25, 26, 27, 31, 32, 42, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "have": [0, 2, 3, 7, 26, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 105, 106, 109], "develop": [0, 94, 104, 111], "These": [0, 26, 31, 48, 75, 84, 95], "ar": [0, 2, 3, 7, 10, 13, 14, 15, 16, 23, 24, 25, 26, 27, 30, 31, 32, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 72, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 101, 104, 107, 110, 111], "still": [0, 31, 48, 112], "compat": [0, 31, 57, 58, 90, 91], "all": [0, 5, 7, 20, 24, 27, 30, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 97, 98, 99, 101, 103, 105, 110, 111, 112], "capabl": [0, 105], "bin": [0, 3, 16, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 55, 56], "which": [0, 2, 3, 10, 14, 23, 25, 30, 31, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 66, 67, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 106, 107, 108, 109, 110, 111], "theoret": [0, 3, 93], "improv": [0, 3, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "runtim": [0, 45, 96, 110], "significantli": [0, 2, 41, 44, 47, 52, 54, 56], "high": [0, 7, 10, 23, 25, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 95, 105], "dimension": [0, 7, 23, 45, 63, 65, 66, 73, 97, 103, 105], "sampl": [0, 3, 5, 7, 10, 13, 14, 16, 20, 23, 24, 25, 27, 29, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 106, 107, 109, 110, 111, 112], "size": [0, 3, 5, 7, 10, 14, 15, 22, 23, 28, 31, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 86, 87, 88, 89, 96, 98, 99, 107, 111], "data": [0, 2, 3, 5, 14, 15, 20, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 106], "us": [0, 2, 3, 5, 6, 7, 10, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 67, 71, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 104, 105, 106, 109, 110], "your": [0, 88, 89, 93], "own": [0, 46, 48, 49, 50, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "risk": 0, "extens": 0, "compar": [0, 2, 3, 10, 14, 15, 22, 27, 28, 32, 41, 44, 55, 56, 76, 79, 85, 86, 87, 88, 89, 93, 98, 100, 110], "decis": [0, 4, 9, 21, 23, 28, 30, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 98, 100, 105, 106], "model": [0, 7, 13, 20, 23, 24, 25, 26, 27, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 103, 104, 109, 110], "tradition": 0, "implement": [0, 30, 31, 32, 45, 46, 47, 48, 61, 63, 65, 66, 67, 86, 87, 93, 95, 96, 103, 104, 105], "axi": [0, 3, 5, 7, 10, 13, 14, 20, 22, 24, 26, 28, 29, 31, 32, 33, 36, 37, 38, 39, 40, 42, 43, 49, 51, 52, 53, 54, 85, 86, 87, 88, 89, 95, 96, 98, 99, 103, 106], "align": [0, 5, 7, 20, 22, 28, 29, 32, 33, 49, 51, 52, 53, 54, 85, 86, 87, 88, 89, 95, 96, 98, 99, 106], "split": [0, 2, 3, 5, 10, 14, 23, 26, 29, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 99, 107, 108, 109], "store": [0, 26, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 93, 95, 96], "mean": [0, 3, 10, 14, 16, 23, 24, 25, 26, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 100, 103, 105, 107], "outcom": 0, "i": [0, 2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103, 105, 106, 107, 108, 109, 111], "e": [0, 10, 14, 16, 30, 31, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97], "label": [0, 3, 10, 14, 15, 16, 20, 25, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97], "vote": [0, 46, 48, 49, 51, 53, 55, 57, 58, 75, 84], "leaf": [0, 2, 10, 13, 14, 15, 16, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 104, 112], "node": [0, 2, 5, 10, 13, 14, 15, 16, 23, 29, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 99], "howev": [0, 23, 26, 30, 96], "more": [0, 3, 10, 13, 20, 23, 24, 30, 41, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 95, 96, 107], "exot": 0, "possibl": [0, 23, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "call": [0, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 67, 71, 72, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 107], "some": [0, 7, 10, 23, 30, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 99, 107], "multipl": [0, 7, 30, 31, 45, 50, 67, 85, 96, 106], "column": [0, 23, 24, 25, 26, 27, 30, 31, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 82, 84, 85, 86, 87, 88, 89, 96, 103], "creat": [0, 7, 10, 13, 14, 15, 16, 26, 30, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95], "new": [0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 101, 105, 109, 110], "valu": [0, 5, 10, 13, 14, 16, 23, 24, 30, 31, 32, 34, 35, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 98, 99, 108, 110, 111, 112], "thi": [0, 2, 3, 7, 10, 13, 14, 15, 16, 23, 24, 25, 26, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 71, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112], "can": [0, 7, 10, 13, 26, 30, 31, 32, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 103, 112], "take": [0, 14, 20, 26, 57, 58, 67, 71, 76, 79, 90, 91, 105], "form": [0, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "spars": [0, 23, 27, 28, 29, 33, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 104], "linear": [0, 13, 20, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "combin": [0, 20, 32, 36, 45, 49, 51, 52, 57, 85, 86, 87, 91, 95, 96, 97], "even": [0, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "advantag": [0, 105], "structur": [0, 7, 20, 30, 31, 48, 67, 75, 80, 81, 82, 83, 84, 88, 89, 97, 103], "g": [0, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96], "an": [0, 5, 7, 10, 13, 14, 15, 16, 23, 26, 27, 29, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 69, 71, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 109, 110, 111], "imag": [0, 5, 29, 33, 88, 89, 98, 99], "indic": [0, 13, 14, 15, 16, 26, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 68, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 106, 109], "awar": [0, 30, 88, 89], "fashion": [0, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "class": [0, 3, 5, 10, 12, 14, 17, 25, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 107, 110, 111], "gener": [0, 2, 3, 5, 7, 12, 14, 15, 20, 23, 24, 25, 26, 27, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 83, 84, 87, 88, 89, 95, 96, 97, 99, 103, 107, 109, 110], "while": [0, 2, 3, 7, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 110], "everyth": [0, 99], "els": [0, 10, 26, 27, 36, 37, 39, 41, 42, 44, 63, 65, 66], "consist": [0, 10, 23, 27, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 81, 83, 87, 89, 90, 91, 96, 106], "how": [0, 5, 7, 9, 12, 14, 15, 23, 26, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 99, 110], "build": [0, 2, 26, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 105, 106], "classif": [0, 7, 25, 26, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 107], "regress": [0, 3, 5, 12, 17, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 107], "thei": [0, 10, 23, 31, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 110], "also": [0, 2, 3, 20, 30, 31, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 106, 107, 110], "power": [0, 95], "non": [0, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "parametr": [0, 96], "embed": 0, "cluster": [0, 3, 10, 26, 57, 58, 90, 91, 97], "The": [0, 2, 3, 7, 10, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 106, 112], "randomtreesembed": [0, 82], "exampl": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 97, 98, 106], "other": [0, 3, 7, 10, 14, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "state": [0, 41, 44], "art": 0, "explicitli": [0, 110], "base": [0, 10, 14, 23, 36, 38, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 107, 109, 110], "criterion": [0, 30, 31, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100, 103], "varianc": [0, 14, 23, 47, 48, 52, 54, 56, 57, 58, 61, 75, 81, 83, 84, 87, 89, 90, 91, 95, 97], "bic": [0, 57, 58, 90, 91, 100], "compris": [0, 88, 89], "those": [0, 14, 15, 23, 46, 47, 48, 51, 52, 53, 54, 55, 56, 73, 80, 81, 82, 83, 84, 86, 87, 95, 96], "avail": [0, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 94, 105, 112], "standalon": 0, "isol": [0, 10, 45, 93, 94, 105], "ensembl": [0, 3, 10, 13, 14, 15, 16, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 82, 83, 95], "extrem": [0, 23, 24, 41, 46, 47, 55, 56, 82, 83], "extend": [0, 7, 10, 45, 93, 96, 105], "allow": [0, 14, 23, 31, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 105, 106, 107, 109, 110], "flexibl": [0, 97], "inher": [0, 45, 57, 58], "produc": [0, 10, 111], "like": [0, 10, 30, 31, 32, 36, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97], "extract": [0, 23, 24, 27], "pairwis": 0, "from": [0, 2, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 95, 96, 97, 98, 106, 110, 112], "includ": [0, 3, 5, 34, 46, 48, 49, 50, 51, 53, 55, 71, 75, 80, 82, 84, 85, 86, 88, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "correct": 0, "turn": [0, 104, 110], "proper": 0, "In": [0, 2, 7, 10, 16, 23, 24, 26, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 104, 110], "addit": [0, 46, 47, 55, 56, 57, 58, 61, 76, 78, 79, 90, 91, 96, 110], "leav": [0, 2, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "natur": [0, 59, 60, 72, 97], "wai": [0, 10, 23, 45, 67, 82, 83, 97], "comput": [0, 2, 23, 27, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 68, 69, 70, 71, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 103, 104, 110], "neighbor": [0, 3, 45, 50, 67, 71, 93, 107], "nearest": [0, 3, 13, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 107, 108, 109], "interfac": [0, 30, 31, 32], "similar": [0, 23, 26, 40, 49, 51, 52, 53, 54, 57, 58, 63, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 103], "nearestneighbor": [0, 50, 67, 71], "perform": [0, 23, 24, 25, 26, 27, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 97, 110], "conveni": 0, "simul": [0, 1, 2, 4, 5, 22, 28, 30, 60, 63, 64, 65, 66, 95, 98, 99, 110, 111], "beyond": [0, 96], "offer": 0, "work": [0, 7, 16, 30, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "progress": 0, "help": [0, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "evalu": [0, 10, 23, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 100], "mutual": [0, 38, 41, 43, 44, 59, 60, 68, 69, 70, 71, 72, 74, 90, 103, 109], "inform": [0, 3, 7, 20, 24, 25, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 68, 69, 70, 71, 72, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 103, 109], "mi": [0, 5, 34, 35, 43, 44, 59, 60, 65, 71, 73, 78, 98, 99, 107], "condit": [0, 2, 14, 15, 36, 38, 41, 43, 44, 53, 54, 59, 60, 67, 68, 71, 88, 89, 103, 107], "cmi": [0, 5, 34, 35, 65, 68, 71, 73, 78, 98, 99], "specif": [0, 30, 31, 32, 36, 37, 39, 42, 46, 48, 49, 51, 53, 55, 63, 65, 66, 75, 76, 79, 96, 106], "multivari": [0, 25, 31, 59, 60, 63, 66, 68, 69, 70, 73, 88, 89, 105], "gaussian": [0, 1, 2, 4, 5, 10, 45, 59, 60, 61, 63, 65, 66, 68, 69, 70, 73, 97, 98, 99], "analyt": [0, 68, 69, 70, 71, 73], "solut": [0, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 68, 69, 70, 71, 75], "entropi": [0, 36, 38, 41, 43, 46, 48, 49, 51, 53, 55, 59, 60, 68, 69, 70, 73, 75, 80, 82, 84, 85, 86, 88], "distribut": [0, 10, 14, 16, 25, 40, 45, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 79, 96, 97, 108, 109], "demonstr": [1, 5, 6, 7, 12, 13, 15, 19, 22, 23, 26, 29, 31, 32, 33, 98, 99], "usag": [1, 2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 80, 81, 82, 83, 84, 93, 99, 106, 112], "honest": [1, 4, 5, 48, 75, 84, 93, 98, 99, 100, 109, 110], "obtain": [1, 5, 7, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 95, 99], "predict": [1, 3, 17, 20, 22, 26, 28, 30, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 98, 104, 110], "comparison": [1, 4, 5, 13, 23, 24, 25, 27, 55, 56, 98, 99], "plot": [1, 2, 4, 5, 7, 19, 21, 22, 23, 24, 26, 28, 29, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 95, 98, 99], "overlap": [1, 2, 4, 5, 65, 98, 99], "go": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 63, 65, 66], "end": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "download": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99], "full": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 63, 65, 66, 76], "code": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 90, 91, 94, 99], "honesttreeclassifi": [2, 48, 75, 103, 104, 110], "librari": [2, 3, 101, 103, 104], "sklearn": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 106], "decisiontreeclassifi": [2, 20, 26, 30, 32, 46, 48, 55, 75, 81, 82, 84, 85, 86, 87, 88, 110], "scikit": [2, 20, 57, 58, 90, 91, 93, 94, 95, 96, 110, 112], "learn": [2, 20, 22, 23, 24, 26, 46, 47, 48, 51, 52, 55, 56, 57, 58, 64, 75, 76, 80, 81, 82, 83, 84, 86, 87, 90, 91, 93, 94, 95, 96, 97], "iri": [2, 5, 19, 21, 26, 80, 84, 86, 96, 98, 99], "dataset": [2, 3, 5, 6, 8, 10, 14, 16, 19, 21, 22, 25, 26, 28, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 107, 109, 110, 111], "both": [2, 7, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 61, 75, 76, 80, 82, 96], "classifi": [2, 3, 26, 45, 46, 47, 48, 49, 51, 53, 55, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 110], "fit": [2, 3, 10, 13, 14, 16, 20, 26, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 109, 110], "same": [2, 13, 14, 15, 16, 20, 30, 31, 32, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 75, 80, 82, 84, 85, 86, 88, 89, 92, 95, 96, 107], "side": 2, "import": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 100, 105, 112], "matplotlib": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 94], "pyplot": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "plt": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "config_context": 2, "load_iri": [2, 20, 26, 80, 82, 84, 86, 96], "model_select": [2, 3, 7, 10, 14, 15, 16, 23, 24, 25, 27, 47, 80, 81, 82, 83, 84, 86, 87, 89], "train_test_split": [2, 3, 10, 15, 16, 47, 82, 83], "plot_tre": [2, 20], "load": [2, 10, 14, 20, 26, 27, 62], "x": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 111], "y": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "target": [2, 7, 14, 16, 20, 26, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96], "x_train": [2, 3, 10, 14, 15, 16, 47, 82, 83], "x_val": 2, "y_train": [2, 3, 10, 13, 14, 15, 16, 47, 80, 81, 82, 83], "y_val": 2, "test_siz": [2, 3, 16, 77], "0": [2, 3, 7, 10, 13, 14, 15, 16, 18, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 71, 72, 74, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 101], "1": [2, 3, 7, 8, 10, 11, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101, 105], "random_st": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 106], "initi": [2, 37, 38, 39, 40, 41, 42, 43, 44, 45], "max_featur": [2, 3, 7, 14, 23, 24, 25, 27, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 107, 108, 109], "3": [2, 3, 4, 7, 10, 14, 15, 20, 23, 24, 25, 26, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 101, 105], "dishonest_clf": 2, "honest_method": [2, 48, 75, 84, 104], "none": [2, 7, 25, 26, 27, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "honest_prior": [2, 48, 75, 84], "ignor": [2, 20, 36, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 112], "honest_noprune_clf": 2, "appli": [2, 10, 13, 14, 15, 16, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 107, 108, 109], "honest_clf": 2, "prune": [2, 46, 47, 48, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104], "sklearn_clf": 2, "fig": [2, 3, 7, 10, 14, 20, 23, 24, 25, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "ax": [2, 3, 7, 10, 20, 23, 24, 25, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 96], "subplot": [2, 3, 7, 10, 14, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "nrow": [2, 14, 31], "ncol": [2, 14, 31], "4": [2, 10, 14, 17, 25, 30, 31, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 98, 101], "figsiz": [2, 3, 10, 14, 25, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "15": [2, 10, 13, 14, 20, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44], "5": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 28, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 66, 72, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 101, 105], "note": [2, 23, 26, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 101, 112], "skip": 2, "paramet": [2, 7, 14, 20, 23, 24, 25, 26, 30, 31, 32, 36, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 104, 105, 109, 110], "valid": [2, 7, 14, 16, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "becaus": [2, 7, 30, 45, 47, 48, 50, 52, 54, 56, 81, 83, 87, 89, 96], "intern": [2, 30, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "function": [2, 15, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 67, 71, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 108, 109, 112], "check": [2, 36, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 110], "estim": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 110, 111, 112], "instanc": [2, 3, 16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 65, 66, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 105, 111], "subclass": 2, "fork": 2, "version": [2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 101], "2": [2, 3, 4, 7, 8, 10, 13, 14, 15, 16, 20, 25, 26, 27, 28, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101], "skip_parameter_valid": 2, "true": [2, 3, 5, 10, 20, 23, 24, 25, 27, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 98, 99, 107, 111], "fill": [2, 20, 26], "set_titl": [2, 7, 10, 23, 24, 25, 27], "fals": [2, 3, 10, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 108, 109], "No": [2, 20], "dishonest": 2, "show": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "variant": [2, 5, 6, 7, 12, 99], "infer": [2, 20, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "achiev": [2, 3, 26, 47, 56, 93, 95], "two": [2, 3, 7, 10, 13, 20, 23, 24, 26, 27, 30, 57, 58, 61, 63, 65, 66, 76, 79, 82, 83, 95, 96, 100, 103, 107], "part": [2, 26, 30, 31, 32], "train": [2, 3, 5, 13, 14, 16, 19, 21, 23, 24, 26, 31, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 106], "set": [2, 7, 10, 23, 24, 26, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 106, 107, 110], "posterior": [2, 5, 34, 35, 37, 38, 39, 40, 42, 43, 48, 66, 75, 76, 77, 78, 79, 84, 98, 99, 111, 112], "result": [2, 3, 10, 24, 26, 30, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 107, 112], "calibr": [2, 4, 93, 96, 98], "see": [2, 3, 7, 13, 14, 15, 16, 20, 23, 24, 26, 27, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97], "method": [2, 3, 5, 12, 16, 17, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 106, 110], "contain": [2, 3, 7, 10, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "empti": [2, 30, 32, 48, 75, 84, 104, 112], "leverag": 2, "thu": [2, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 75, 86, 87, 95, 96, 97], "smaller": [2, 46, 47, 48, 55, 56, 75, 80, 81, 82, 83, 84], "than": [2, 16, 23, 24, 25, 26, 30, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 107, 109, 110, 111], "regular": [2, 3, 7, 16, 20, 23, 63, 65, 66], "when": [2, 7, 10, 13, 23, 32, 37, 39, 42, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 101, 105, 106, 107, 108, 109, 110, 111], "do": [2, 5, 9, 26, 30, 31, 32, 57, 58, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 99], "prior": [2, 48, 61, 75, 84, 96, 97, 112], "case": [2, 7, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 96, 106, 108, 109], "np": [2, 3, 7, 10, 13, 14, 15, 16, 20, 24, 25, 26, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 112], "nan": [2, 46, 48, 49, 51, 52, 53, 55, 57, 58, 75, 84, 104, 112], "less": [2, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 111], "print": [2, 23, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 51, 52, 54, 55, 56, 61], "ndishonest": 2, "predict_proba": [2, 3, 46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88, 112], "nhonest": 2, "without": [2, 3, 45, 48, 80, 81, 82, 83, 97, 109], "ndtc": 2, "78571429": 2, "21428571": 2, "9": [2, 3, 10, 17, 21, 23, 26, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 93, 94, 98, 101, 103], "14285714": 2, "85714286": 2, "25": [2, 3, 13, 15, 26, 30, 31, 36], "75": [2, 13, 30, 36, 105], "33333333": 2, "66666667": 2, "dtc": 2, "total": [2, 3, 4, 7, 8, 10, 11, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 98], "run": [2, 3, 7, 10, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 75, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 106, 107], "time": [2, 3, 5, 7, 10, 14, 15, 16, 20, 23, 24, 25, 26, 27, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 72, 76, 79, 86, 87, 88, 89, 90, 92, 96, 99], "script": [2, 3, 7, 10, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "minut": [2, 3, 7, 10, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "320": [2, 4, 15, 17, 98], "second": [2, 3, 7, 10, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 61, 63, 65, 66, 85, 96], "memori": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 86, 87, 93], "236": [2, 4, 98, 110], "mb": [2, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 98], "jupyt": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99], "notebook": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99], "plot_honest_tre": [2, 4, 98], "ipynb": [2, 3, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "python": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 94, 99], "sourc": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99], "py": [2, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 98], "zip": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99], "galleri": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 98, 99], "sphinx": [2, 3, 5, 7, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99], "variou": [3, 46, 47, 49, 51, 52, 53, 54, 55, 56, 110], "tree": [3, 4, 7, 9, 13, 14, 15, 16, 21, 23, 24, 27, 28, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 77, 78, 93, 94, 95, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "user": [3, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 103, 104, 106, 112], "guid": [3, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 97, 103], "isoton": 3, "irf": 3, "sigmoid": 3, "sigrf": 3, "rf": [3, 7, 14, 15, 25, 27, 96], "curv": [3, 36, 37, 39, 42, 96], "differ": [3, 5, 7, 12, 17, 19, 22, 23, 26, 28, 29, 30, 38, 41, 43, 44, 45, 50, 62, 63, 65, 66, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 100, 108, 109], "red": 3, "line": [3, 14, 15], "closest": 3, "ideal": [3, 80, 81, 82, 83, 94], "figur": [3, 10, 20, 23, 31], "reproduc": [3, 45, 61, 62, 67, 109], "ronan": [3, 53, 54, 88, 89, 93, 95, 103], "perri": [3, 53, 54, 88, 89, 93, 95, 103], "ronak": [3, 53, 54, 88, 89, 95], "mehta": [3, 53, 54, 88, 89, 95], "richard": 3, "guo": 3, "eva": 3, "yezeret": 3, "jes\u00fa": 3, "arroyo": [3, 53, 54, 88, 89, 95], "mike": 3, "powel": 3, "hayden": 3, "helm": 3, "cencheng": [3, 64, 95], "shen": [3, 64, 95], "joshua": [3, 53, 54, 58, 64, 88, 89, 95, 97], "t": [3, 7, 10, 15, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 62, 64, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97], "vogelstein": [3, 53, 54, 58, 64, 88, 89, 95, 97], "adapt": [3, 57, 58, 69, 93, 97], "quantiti": [3, 93], "arxiv": [3, 64, 93], "2021": [3, 93], "1907": [3, 93], "00325": [3, 93], "necessari": [3, 94], "modul": [3, 30, 31, 32, 93, 104], "numpi": [3, 7, 10, 13, 14, 15, 16, 20, 24, 25, 26, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94], "cm": [3, 20, 26, 30, 32], "calibratedclassifiercv": 3, "randomforestclassifi": [3, 7, 25, 27, 46, 47, 49, 51, 53, 82], "honestforestclassifi": [3, 37, 38, 39, 40, 41, 42, 43, 44, 103, 106, 109, 110, 111, 112], "defin": [3, 25, 30, 31, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 71, 72, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 107], "color_dict": 3, "honestrf": 3, "f41711": 3, "1b9e77": 3, "377eb8": 3, "fdae61": 3, "n_estim": [3, 7, 10, 13, 14, 16, 23, 24, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 77, 78, 79, 110], "100": [3, 7, 10, 14, 23, 25, 27, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 75], "n_job": [3, 7, 23, 24, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 76, 79], "clf_cv": 3, "rep": 3, "clf": [3, 10, 20, 23, 24, 25, 27, 45, 46, 48, 51, 55, 80, 84, 86, 96], "honest_fract": [3, 48, 75, 84], "cv": [3, 7, 23, 24, 25, 27, 77, 80, 81, 84, 86, 87, 89], "def": [3, 7, 14, 15, 23, 24, 25, 27, 36, 37, 38, 39, 40, 42, 43], "likelihood": [3, 36, 37, 38, 39, 40, 41, 97], "lik1": 3, "prod": 3, "exp": [3, 15, 36, 38, 43, 59, 60], "asarrai": 3, "lik0": 3, "return": [3, 7, 10, 14, 15, 23, 24, 25, 27, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "n_sampl": [3, 7, 10, 14, 15, 16, 25, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110], "60000": 3, "n_bin": 3, "calibration_curv": 3, "here": [3, 7, 10, 13, 14, 15, 16, 30, 31, 32, 45, 48, 96, 99], "blob": 3, "where": [3, 7, 20, 27, 31, 36, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 68, 71, 72, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 103, 106, 107, 108, 109, 111, 112], "half": [3, 48, 75, 81], "posit": [3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 55, 80, 82, 84, 95, 97], "neg": [3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "probabl": [3, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 53, 55, 57, 58, 59, 60, 61, 66, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 88, 96, 110], "therefor": [3, 48, 51, 52, 53, 54, 55, 56, 88, 89, 95, 96], "center": [3, 7, 10, 14, 16, 57, 58, 61, 90, 91], "make_blob": [3, 7], "shuffl": [3, 26, 44, 48, 51, 52, 54, 55, 56, 61, 67, 75, 76, 79, 106], "42": [3, 10, 23, 24, 46, 47, 56, 61, 82, 83], "sample_weight": [3, 30, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "randomst": [3, 10, 15, 30, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 62, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "rand": [3, 10], "shape": [3, 7, 10, 13, 14, 15, 16, 23, 24, 26, 27, 30, 31, 32, 36, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95], "test": [3, 14, 15, 23, 24, 25, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 63, 65, 66, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 105, 106, 107, 110], "x_test": [3, 10, 13, 14, 15, 16, 47, 82, 83], "y_test": [3, 10, 14, 15, 16, 47, 82, 83], "sw_train": 3, "sw_test": 3, "class_one_prob": 3, "name": [3, 10, 16, 23, 24, 26, 27, 37, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 112], "10": [3, 7, 10, 13, 14, 15, 16, 23, 24, 25, 26, 30, 32, 46, 47, 49, 53, 54, 55, 56, 58, 61, 62, 63, 65, 66, 80, 81, 84, 85, 86, 87, 88, 89, 93, 95, 96, 97, 101], "y_uniqu": 3, "uniqu": [3, 23, 24, 27, 36, 38, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95], "color": [3, 10, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "rainbow": 3, "linspac": [3, 7, 10, 15, 24], "this_i": 3, "this_x": 3, "this_sw": 3, "scatter": [3, 10, 13, 20, 26, 31], "": [3, 5, 10, 20, 23, 25, 26, 30, 34, 35, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99], "50": [3, 16, 23, 24, 26, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 81], "c": [3, 10, 14, 15, 20, 26, 69, 70, 80, 81, 83, 84, 86, 87, 88, 89, 94, 110], "newaxi": 3, "alpha": [3, 10, 14, 26, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 72, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "edgecolor": [3, 10, 20, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44], "k": [3, 10, 13, 26, 46, 47, 50, 71, 90], "legend": [3, 10, 13, 15, 16, 20, 25, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44], "loc": [3, 13, 15, 16, 20, 25], "best": [3, 23, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "set_xtick": [3, 30, 32], "set_ytick": [3, 30, 32], "clf_name": 3, "prob": 3, "item": [3, 13, 14, 15, 16, 24], "order": [3, 14, 23, 24, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "lexsort": 3, "51": 3, "reshap": [3, 10, 16, 26, 30, 31, 32, 36, 42, 43, 44], "x_test_prob": 3, "linewidth": [3, 30], "l": [3, 14, 23, 24, 46, 47, 56, 80, 81, 82, 83, 84, 86, 87, 95, 96, 97], "r": [3, 10, 26, 36, 37, 42, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 71, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 96, 104], "truth": [3, 10, 15, 96], "set_ylim": [3, 14, 36, 37, 39, 42], "05": [3, 35, 41, 44, 98], "set_xlabel": [3, 7, 14, 23, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44], "sort": [3, 10, 14, 23, 24, 27, 48, 50, 90, 97], "p": [3, 5, 14, 23, 24, 25, 34, 35, 36, 37, 42, 46, 47, 48, 49, 51, 53, 55, 56, 63, 65, 72, 75, 76, 79, 82, 83, 98, 99, 110], "set_ylabel": [3, 7, 14, 23, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44], "upper": [3, 14, 15], "left": [3, 14, 15, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "tight_layout": [3, 10, 14, 20, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44], "savefig": [3, 25], "overlapping_gaussian": 3, "png": 3, "discuss": [3, 26], "well": [3, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "closer": [3, 63, 65, 66, 104], "shown": [3, 68], "below": [3, 39], "7": [3, 10, 25, 36, 93, 101], "304": [3, 4, 98], "267": [3, 4, 98], "plot_overlapping_gaussian": [3, 4, 98], "00": [4, 8, 11, 17, 18, 21, 28, 33, 35, 81, 98], "09": [4, 17, 33, 36, 98], "624": 4, "execut": [4, 8, 11, 17, 18, 21, 28, 33, 35, 98], "file": [4, 8, 11, 17, 18, 21, 28, 33, 35, 94, 98], "auto_exampl": [4, 8, 11, 17, 18, 21, 28, 33, 35], "mem": [4, 8, 11, 17, 18, 21, 28, 33, 35, 98], "07": [4, 11, 28, 35, 98], "02": [4, 20, 36, 37, 42, 81, 98], "algorithm": [5, 10, 23, 45, 50, 57, 58, 71, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 99], "analyz": [5, 6, 8, 30, 31, 98, 99], "concern": [5, 9, 34, 99], "extendedisolationforest": [5, 9, 11, 98, 99], "interpol": [5, 12, 17, 30, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99], "interv": [5, 12, 13, 15, 17, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 96, 98, 99], "regressor": [5, 12, 16, 17, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 87, 89, 98, 99], "between": [5, 7, 13, 14, 19, 23, 24, 25, 27, 30, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 99], "surfac": [5, 19, 21, 22, 28, 31, 32, 98, 99], "extra": [5, 22, 27, 28, 32, 46, 47, 82, 83, 98, 99, 105, 110], "cc18": [5, 22, 28, 32, 95, 98, 99], "speed": [5, 22, 23, 28, 56, 97, 98, 99, 105], "v": [5, 7, 22, 23, 28, 47, 48, 52, 54, 56, 63, 64, 65, 66, 81, 83, 87, 89, 95, 96, 98, 99], "pariti": [5, 22, 28, 95, 98, 99], "standard": [5, 10, 22, 23, 24, 25, 27, 28, 32, 37, 38, 39, 40, 41, 42, 43, 44, 50, 61, 71, 73, 79, 88, 89, 96, 98, 99], "strategi": [5, 29, 48, 55, 56, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99], "visual": [5, 29, 31, 32, 33, 98, 99], "matrix": [5, 7, 29, 31, 33, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 69, 70, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 99], "matric": [5, 29, 30, 33, 45, 57, 58, 62, 63, 65, 66, 67, 96, 98, 99, 103], "seri": [5, 29, 33, 88, 89, 98, 99], "tool": [5, 34, 99], "tutori": [5, 34, 37, 38, 39, 40, 41, 42, 43, 44, 99], "statist": [5, 16, 34, 35, 41, 44, 48, 62, 63, 65, 66, 76, 79, 80, 81, 84, 86, 87, 93, 95, 96, 98, 99, 107], "functionss": [5, 34, 99], "calcul": [5, 14, 31, 34, 35, 45, 65, 76, 78, 92, 97, 98, 99, 104], "98": [5, 26, 34, 35, 65, 76, 78, 79, 98, 99], "pauc": [5, 34, 35, 65, 78, 98, 99], "helling": [5, 34, 35, 65, 78, 98, 99], "distanc": [5, 34, 35, 50, 57, 58, 65, 71, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99], "might": [5, 34, 35, 46, 48, 49, 51, 52, 53, 55, 57, 58, 65, 75, 76, 96, 98, 99, 111], "multiview": [5, 7, 8, 34, 35, 43, 61, 65, 76, 78, 98, 99], "comight": [5, 34, 35, 65, 76, 98, 99], "auto_examples_python": [5, 99], "auto_examples_jupyt": [5, 99], "multiviewrandomforestclassifi": 7, "correl": 7, "variabl": [7, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 68, 72, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96], "each": [7, 13, 14, 15, 16, 20, 23, 24, 26, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 107, 108, 109, 111], "uniformli": [7, 25, 30, 31], "instead": [7, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 111], "vastli": 7, "n_featur": [7, 30, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 67, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96], "sum": [7, 25, 30, 40, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "number": [7, 10, 25, 26, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 106, 107, 108, 109, 111], "If": [7, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 67, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "known": [7, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 73, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95], "one": [7, 10, 13, 14, 15, 16, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 67, 71, 72, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 107, 108, 109], "pass": [7, 24, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 103, 108, 109, 110], "via": [7, 20, 64, 86, 87, 90, 93, 94, 95, 103, 106, 107, 109], "feature_set_end": [7, 30, 49, 85], "For": [7, 10, 13, 20, 23, 24, 27, 30, 31, 32, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 71, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 105], "splitter": [7, 33, 48, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 106], "project": [7, 10, 20, 27, 29, 33, 49, 51, 52, 86, 87, 93, 95, 96, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "collect": [7, 10, 13, 14, 15, 16, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 84], "defaultdict": [7, 13, 14, 15, 16], "panda": [7, 23, 24, 25, 26, 27, 42, 43, 44, 57, 58, 64, 90, 91, 103, 105, 106, 110, 111], "pd": [7, 23, 24, 25, 26, 27, 42, 43, 44, 73], "seaborn": [7, 23, 24, 25, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44], "sn": [7, 23, 24, 25, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44], "cross_val_scor": [7, 80, 81, 84, 86, 87, 89], "seed": [7, 15, 25, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 57, 58, 59, 60, 63, 64, 65, 66, 71, 72, 73, 74, 76, 77, 79, 110], "12345": 7, "rng": [7, 10, 14, 15, 16], "default_rng": [7, 73], "make_multiview_classif": 7, "n_features_1": 7, "n_features_2": 7, "1000": [7, 10, 14, 15, 24, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 55, 72, 73, 74], "cluster_std_first": 7, "cluster_std_second": 7, "x0_first": 7, "y0": 7, "x1_first": 7, "y1": [7, 74], "low": [7, 10, 14, 23, 24, 62, 111], "subspac": [7, 71], "cluster_std": 7, "integ": [7, 45, 46, 48, 49, 51, 53, 55, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 108, 109], "10000": [7, 14, 24, 36, 41, 44, 76, 79], "x0": 7, "concaten": [7, 10, 13, 14, 85], "standard_norm": 7, "x1": 7, "vstack": 7, "hstack": [7, 36, 42, 43, 44], "first": [7, 20, 25, 26, 30, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 107], "ha": [7, 26, 27, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "five": 7, "dimens": [7, 23, 24, 25, 30, 31, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 72, 75, 88, 89, 90, 91, 96, 111], "vari": [7, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "thousand": 7, "kept": 7, "fix": [7, 48, 51, 52, 53, 54, 55, 56, 71, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "so": [7, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 65, 66, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "500": [7, 37, 38, 39, 40, 41, 42, 43, 44, 79], "n_features_view": 7, "20000": 7, "astyp": [7, 23, 24, 25, 27, 30, 31, 32], "int": [7, 10, 14, 23, 24, 27, 30, 32, 36, 37, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "make": [7, 14, 23, 31, 95, 103, 106], "signal": [7, 62, 65, 66], "portion": 7, "increasingli": 7, "add": [7, 26, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 61, 64, 72, 74, 75, 103, 106, 107, 110], "nois": [7, 10, 15, 61, 62, 63, 64, 65, 66, 72, 74], "idx": [7, 13, 14, 15, 16, 20, 26, 31], "enumer": [7, 13, 14, 15, 16, 20, 23, 24, 25, 27, 31, 48, 51, 52, 53, 54, 55, 56], "append": [7, 10, 13, 14, 15, 16, 23, 24, 25, 27], "over": [7, 10, 30, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 61, 75, 80, 82, 84, 85, 88, 89, 95, 107], "sqrt": [7, 23, 24, 40, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 105, 107], "list": [7, 13, 14, 15, 16, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "arrai": [7, 10, 13, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 73, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 108, 109, 111], "mvrf": 7, "cross": [7, 77, 96], "rf_score": 7, "mvrf_score": 7, "len": [7, 10, 13, 14, 15, 16, 26, 30, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "now": [7, 23, 24, 25, 26, 27, 31, 94, 103, 104, 107, 108, 109, 110, 111], "experi": 7, "df": [7, 23, 24, 25, 27], "datafram": [7, 23, 24, 25, 26, 27, 42, 43, 44, 57, 58, 67, 90, 91], "melt": 7, "easier": [7, 106], "id_var": 7, "var_nam": 7, "value_nam": 7, "lineplot": [7, 24], "marker": [7, 14, 31], "o": [7, 10, 13, 23, 31, 63, 65, 66, 90, 96, 103, 105, 112], "hue": [7, 24, 42, 43, 44], "As": [7, 27, 30, 32, 36, 63, 65, 66, 92, 96], "outperform": [7, 27, 96], "increas": [7, 14, 23, 24, 46, 47, 50, 55, 56, 62, 63, 65, 66, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "kei": [7, 30, 80, 81, 82, 83], "35": [7, 8, 13, 98], "261": [7, 8, 98], "926": [7, 8, 98], "plot_multiview_dtc": [7, 8, 98], "multi": [8, 29, 33, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 82, 84, 85, 86, 88, 93, 98, 100, 103, 106, 107], "view": [8, 29, 33, 49, 61, 62, 85, 93, 98, 106, 107, 108, 109], "anomali": [10, 45], "detect": [10, 45, 93], "isolationforest": [10, 45], "present": [10, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 90, 91, 96], "demo": 10, "toi": 10, "randomli": [10, 23, 30, 32, 41, 44, 45, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "normal": [10, 16, 23, 24, 30, 32, 39, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 73, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95, 96, 103], "randn": [10, 16], "One": [10, 36, 37, 38, 39, 40, 41, 42, 43, 44, 80, 81, 82, 83], "them": [10, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 95], "spheric": 10, "slightli": 10, "deform": 10, "notat": 10, "inlier": [10, 45], "assign": [10, 90, 91, 97], "ground": [10, 15, 96], "wherea": [10, 56, 72, 96], "outlier": [10, 45, 63, 93], "uniform": [10, 15, 25, 48, 61, 71, 72, 74, 75, 84], "copi": [10, 20, 44, 67], "inspect": [10, 20, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "decisionboundarydisplai": [10, 20], "n_outlier": 10, "120": 10, "40": [10, 25], "covari": [10, 45, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 73, 76, 79, 106, 109, 110], "cluster_1": 10, "cluster_2": 10, "ones": [10, 30, 31, 32], "dtype": [10, 27, 30, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "stratifi": [10, 37, 38, 39, 40, 41, 42, 43, 44, 48, 67, 75, 84, 106, 111], "20": [10, 25, 26, 45, 49, 58, 63, 85, 97], "handl": [10, 96, 108, 109], "legend_el": 10, "squar": [10, 31, 47, 52, 54, 56, 63, 81, 83, 87, 89, 107], "titl": [10, 20, 26, 30, 31, 32], "nuniformli": 10, "extended_clf": 10, "max_sampl": [10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 109], "feature_combin": [10, 30, 31, 32, 45, 49, 51, 52, 57, 85, 86, 87, 91, 95, 96], "environ": [10, 94], "pleas": [10, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "rerun": 10, "cell": 10, "html": [10, 95], "represent": [10, 78], "trust": 10, "On": 10, "github": [10, 94], "unabl": [10, 107], "render": 10, "try": [10, 96], "page": [10, 94, 101, 106], "nbviewer": 10, "org": [10, 23, 24, 25, 27, 58, 62, 63, 65, 66, 80, 81, 84, 86, 87, 95, 96, 97], "document": [10, 93, 95], "isolationforestifittedisolationforest": 10, "background": 10, "repres": [10, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 111], "whether": [10, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "given": [10, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 110], "area": [10, 15, 39], "displai": [10, 20], "isoforest": 10, "extendedisoforest": 10, "disp": 10, "from_estim": [10, 20], "response_method": [10, 20], "ax_": 10, "f": [10, 15, 20, 23, 25, 27, 31, 36, 37, 39, 42], "binari": [10, 25, 37, 38, 39, 40, 41, 42, 43, 44, 59, 60, 63, 65, 66, 76, 77, 78, 79], "nof": 10, "By": [10, 41, 44, 46, 47, 48, 55, 56, 57, 58, 63, 65, 66, 72, 73, 75, 80, 81, 82, 83, 84, 90, 91, 95, 104, 109, 111, 112], "decision_funct": [10, 45], "measur": [10, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "observ": [10, 14, 15, 41, 44, 45, 69], "Such": 10, "score": [10, 23, 24, 25, 26, 27, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "averag": [10, 23, 32, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 71, 85, 86, 87, 91, 95], "itself": [10, 25, 46, 48, 49, 51, 53, 55, 57, 58, 71, 75], "depth": [10, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "equival": [10, 45, 47, 49, 51, 52, 55, 56, 86, 87, 96], "requir": [10, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "short": 10, "particular": [10, 45, 96], "highli": [10, 105], "close": [10, 45, 53, 54, 88, 89, 93, 95], "similarli": [10, 96], "larg": [10, 23, 24, 27, 46, 47, 48, 51, 52, 53, 54, 55, 56, 63, 65, 66, 80, 81, 82, 83, 84, 86, 87], "correspond": [10, 13, 14, 15, 16, 20, 26, 36, 46, 48, 49, 51, 53, 54, 55, 62, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "colorbar": [10, 30, 32], "d": [10, 13, 14, 15, 16, 23, 24, 30, 32, 46, 47, 56, 61, 63, 65, 66, 68, 69, 70, 73, 82, 83], "sinusoid": 10, "ad": [10, 45, 46, 47, 55, 56, 57, 58, 61, 72, 80, 81, 82, 83, 90, 91, 96, 103, 104, 105, 106, 110], "top": [10, 14, 26, 93, 95], "n": [10, 18, 23, 24, 27, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 103], "8": [10, 14, 23, 27, 28, 31, 33, 43, 56, 72, 84, 93, 98, 101], "pi": [10, 70, 72, 97], "sin": [10, 15, 61, 72], "6": [10, 11, 23, 24, 25, 27, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 62, 93, 98, 101], "add_subplot": [10, 31], "111": 10, "xlim": [10, 13, 31], "30": [10, 23, 24, 49, 81, 85], "ylim": [10, 31], "200": [10, 109], "circl": 10, "locat": 10, "bottom": 10, "right": [10, 14, 16, 20, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "corner": 10, "inlier_sampl": 10, "outlier_sampl": 10, "theta": [10, 96], "estimators_": [10, 26, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "max_tree_depth": 10, "max": [10, 14, 26, 36, 37, 42, 45, 46, 47, 55, 56, 57, 58, 80, 81, 82, 83, 90, 91, 96], "get_depth": [10, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "rang": [10, 13, 14, 15, 16, 20, 23, 25, 26, 31, 45, 50, 88, 89], "polar": [10, 57, 58, 90, 91], "radii_in": 10, "radii_out": 10, "get": [10, 13, 14, 15, 16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "radii": 10, "lw": [10, 14, 15], "b": [10, 26, 62], "max_depth_tre": 10, "leaf_index": 10, "_decision_path_length": 10, "squeez": [10, 31, 36, 37, 39, 42], "j": [10, 13, 48, 63, 65, 66, 80, 81, 84, 86, 87, 93, 94, 96], "nnomin": 10, "round": [10, 14, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 75, 108, 109], "var": 10, "xlabel": [10, 13, 15, 16, 20, 30, 32], "set_xticklabel": [10, 30, 32], "get_xaxi": 10, "set_vis": 10, "get_yaxi": 10, "sahand": [10, 93], "hariri": [10, 93], "matia": [10, 93], "carrasco": [10, 93], "kind": [10, 93], "robert": [10, 62, 93], "brunner": [10, 93], "ieee": [10, 45, 63, 65, 66, 69, 93], "transact": [10, 45, 93], "knowledg": [10, 45, 58, 93, 96, 97], "engin": [10, 93], "33": [10, 83, 93], "1479": [10, 93], "1489": [10, 93], "2019": [10, 48, 84, 93], "613": [10, 11, 98], "233": 10, "plot_extended_isolation_forest": [10, 11, 98], "outlier_detect": [11, 98], "232": [11, 98], "dure": [13, 23, 31, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 110], "desir": [13, 16, 96], "li": [13, 14, 15, 16, 53, 54, 58, 88, 89, 93, 95, 97, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "point": [13, 14, 20, 25, 26, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "wa": [13, 14, 15, 16, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 75, 84, 90, 91, 96, 107, 110, 111], "heavili": [13, 14, 15, 16], "inspir": [13, 14, 15, 16], "packag": [13, 14, 15, 16, 93, 94, 112], "randomforestregressor": [13, 14, 15, 46, 47, 52, 54, 82], "four": [13, 23, 46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "simpl": [13, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "illustr": 13, "follow": [13, 14, 23, 24, 27, 30, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 72, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 112], "To": [13, 23, 30, 31, 32, 46, 47, 48, 51, 52, 53, 54, 55, 56, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 99], "lower": [13, 14, 20, 45, 48, 72, 74, 75, 80, 81, 82, 83, 84, 96], "higher": [13, 24, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 84, 95, 96, 109], "midpoint": 13, "detail": [13, 23, 24, 25, 27, 30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 65, 66, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "006aff": [13, 14, 15], "ffd237": 13, "0d4599": 13, "f2a619": [13, 14, 15], "a6e5ff": [13, 16], "025": [13, 14, 15], "975": [13, 14, 15], "y_median": 13, "y_err": 13, "est": [13, 37, 38, 39, 40, 41, 42, 43, 44, 76, 77, 78, 79], "fell": [13, 14, 15, 16], "leaf_id": [13, 14, 15, 16], "dictionari": [13, 14, 15, 16, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "map": [13, 14, 15, 16, 26, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "node_to_indic": [13, 14, 15, 16], "id": [13, 14, 15, 16, 23, 24, 27], "fall": [13, 14, 15, 16, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "leaf_ids_test": [13, 14, 15, 16], "y_pred_quantil": [13, 14, 16], "merg": [13, 14, 15, 16], "sublist": [13, 14, 15, 16], "quatil": [13, 14, 15, 16], "predit": [13, 14, 15, 16], "y_pred": [13, 14, 15, 46, 47, 52, 54, 55, 56, 81, 83, 87, 89], "sc": 13, "arang": [13, 14, 26, 30, 31, 32], "zorder": 13, "eb": 13, "median": [13, 14, 15, 16, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "errorbar": 13, "yerr": 13, "ecolor": 13, "fmt": 13, "xtick": 13, "tolist": 13, "ylabel": [13, 15, 16, 20, 30, 32], "actual": [13, 16, 30, 31, 32, 45], "224": [13, 14, 16, 20, 25, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 98], "plot_quantile_interpolation_with_rf": [13, 17, 98], "california": 14, "hous": 14, "being": [14, 50, 61, 96], "u": [14, 47, 52, 54, 56, 62, 81, 83, 87, 89, 94, 95], "95": [14, 15], "bound": [14, 31, 45, 72, 74, 110], "ticker": 14, "funcformatt": 14, "kfold": 14, "util": [14, 16, 27, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 104], "check_random_st": [14, 16], "argument": [14, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 106, 107, 108, 109, 111], "ani": [14, 31, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 103, 110], "variat": [14, 25], "get_quantile_predict": 14, "dollar_formatt": 14, "lambda": [14, 96], "format": [14, 26, 30, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 90, 91], "price": 14, "fetch_california_h": 14, "min": [14, 26, 45], "perm": 14, "permut": [14, 41, 48, 51, 52, 53, 54, 55, 56, 67, 75, 76, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 95, 105, 107, 110], "kf": 14, "n_split": [14, 23, 24, 25, 27], "get_n_split": 14, "y_true": [14, 36, 37, 38, 39, 42, 43, 46, 47, 52, 54, 55, 56, 81, 83, 87, 89], "y_pred_low": [14, 15], "y_pred_upp": [14, 15], "train_index": 14, "test_index": 14, "set_param": [14, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "y_pred_i": 14, "scale": [14, 16, 62, 63, 65, 66, 107], "dollar": 14, "1e5": 14, "confid": [14, 15, 48, 96], "against": 14, "blue": [14, 15], "segment": [14, 90], "halfwai": 14, "ax1": 14, "ax2": 14, "y_pred_interv": 14, "sort_idx": 14, "argsort": 14, "y_min": [14, 26], "minimum": [14, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "y_max": [14, 26], "maximum": [14, 26, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "float": [14, 23, 24, 25, 27, 36, 37, 39, 40, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "mid": [14, 36, 37, 38, 41, 42, 44], "upp": 14, "e0f2ff": [14, 15], "m": [14, 15, 53, 54, 62, 88, 89, 93, 95, 96], "_": [14, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44], "grei": 14, "grid": [14, 25, 26, 31], "xaxi": 14, "set_major_formatt": 14, "yaxi": 14, "set_xlim": [14, 36, 37, 39, 42], "fill_between": [14, 15, 36, 39], "subplots_adjust": 14, "pad": [14, 20, 26], "646": [14, 17, 98], "plot_quantile_regression_intervals_with_rf": [14, 17, 98], "noisi": [15, 25, 61, 62], "make_toy_dataset": 15, "sigma": [15, 97], "lognorm": 15, "atleast_2d": 15, "xx": [15, 26], "max_depth": [15, 23, 24, 25, 26, 27, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "y_pred_quatil": 15, "y_pred_m": 15, "shade": 15, "dot": [15, 61], "black": [15, 20, 26, 30, 31], "ravel": [15, 26], "149": [15, 17, 98], "plot_quantile_toy_example_with_rf": [15, 17, 98], "synthet": 16, "skew": 16, "scipi": [16, 36, 38, 43, 53, 54, 67, 88, 89, 94, 104], "sp": 16, "obliquerandomforestregressor": [16, 95, 103], "5000": [16, 36], "skewnorm_rv": 16, "stat": [16, 36, 37, 38, 39, 40, 41, 42, 43, 44, 80, 81, 84, 86, 87, 104, 108, 109, 110], "skewnorm": 16, "rv": 16, "regr_orf": 16, "y_pred_orf": 16, "idea": 16, "better": [16, 86, 87, 95, 96], "off": [16, 25, 72, 110], "c0c0c0": 16, "e7a4f5": 16, "qrf": 16, "orf": [16, 23, 24], "hist": [16, 36, 37, 38, 39, 40, 41, 42, 43, 44], "count": [16, 36, 38, 43, 92], "346": [16, 17, 98], "plot_quantile_vs_standard_oblique_forest": [16, 17, 98], "948": 17, "quantile_predict": [17, 98], "quantil": [17, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98], "04": [17, 33, 98], "223": [17, 21, 28, 33, 35, 98], "03": [17, 21, 28, 33, 35, 98, 110], "01": [17, 26, 28, 31, 35, 98], "806": [17, 98], "000": 18, "A": [18, 23, 24, 25, 27, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 69, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 103], "pair": [20, 26, 41, 44, 92, 96], "boundari": [20, 26, 31, 50, 53, 54, 88, 89, 103], "made": [20, 110], "threshold": [20, 23, 36, 37, 39, 42, 45, 96], "rule": 20, "built": [20, 23, 26, 82, 83, 84, 95, 96], "_lib": [20, 30, 31, 32], "obliquedecisiontreeclassifi": [20, 32, 48, 49, 51, 53, 87, 96], "ship": 20, "n_class": [20, 26, 36, 38, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 110], "plot_color": 20, "ryb": 20, "plot_step": [20, 26], "clf_label": 20, "123456": [20, 25, 27], "flatten": [20, 31], "pairidx": 20, "onli": [20, 26, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "h_pad": [20, 26], "w_pad": [20, 26], "cmap": [20, 26, 30, 31, 32], "rdylbu": 20, "feature_nam": [20, 26], "target_nam": 20, "suptitl": [20, 26, 31], "borderpad": 20, "handletextpad": 20, "tight": [20, 26], "home": 20, "circleci": 20, "sklearn_vs_treepl": [20, 21, 98], "plot_iris_dtc": [20, 21, 98], "73": [20, 81], "userwarn": 20, "colormap": 20, "singl": [20, 26, 42, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "togeth": [20, 26, 96, 97], "777": [20, 21, 98], "openml": [23, 24, 27], "benchmark": [23, 24, 27, 93], "suit": [23, 24, 27], "classic": [23, 82, 83], "look": [23, 30, 31, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99], "separ": [23, 48, 82, 83, 110], "group": [23, 30, 82, 83, 96, 97], "drawn": [23, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 73, 75, 82, 83, 95], "select": [23, 30, 45, 47, 52, 54, 56, 62, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "among": [23, 49, 51, 52, 53, 54, 57, 58, 63, 65, 66, 72, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "chosen": [23, 46, 47, 48, 55, 56, 75, 80, 81, 82, 83, 84], "contrast": [23, 26, 30, 32, 95, 96], "greedi": [23, 48], "approach": [23, 63, 76, 79, 95], "origin": [23, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 110], "phish": [23, 24, 27], "websit": [23, 24, 27], "http": [23, 24, 25, 27, 58, 62, 63, 65, 66, 80, 81, 84, 86, 87, 94, 95, 96, 97], "www": [23, 24, 27, 62, 80, 81, 84, 86, 87], "search": [23, 24, 25, 27, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "type": [23, 24, 26, 27, 48, 63, 65, 66, 75, 76, 77, 78, 79, 84, 96, 103], "4534": [23, 24, 27], "wdbc": [23, 27], "1510": [23, 27], "lsvt": 23, "1484": 23, "har": [23, 24], "1478": [23, 24], "cnae": [23, 27], "1468": [23, 27], "subsampl": [23, 24, 27, 45, 48, 75, 84, 96], "due": [23, 27, 69, 110, 111], "constraint": [23, 27, 46, 47, 55, 56, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "veri": [23, 26, 46, 47, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 86, 87], "856": 23, "mostli": [23, 32], "zero": [23, 25, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "datatyp": [23, 24], "2000": 23, "nomin": [23, 24], "455": 23, "numer": [23, 24, 27, 109], "310": 23, "561": 23, "864": 23, "deliber": [23, 24], "our": [23, 30, 31, 32, 93, 96], "ci": [23, 24], "should": [23, 24, 30, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94], "appropri": [23, 24], "depend": [23, 24, 38, 41, 43, 44, 72, 93], "bia": [23, 95], "tradeoff": [23, 96], "substanti": 23, "faster": [23, 24, 45, 90, 104, 110], "process": [23, 45, 48, 72, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 105], "omit": [23, 46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "computation": 23, "expens": 23, "main": [23, 45, 94], "stem": [23, 76, 79], "omiss": 23, "ascend": 23, "determin": [23, 45, 47, 52, 54, 56, 67, 81, 83, 87, 89, 96], "henc": [23, 95], "complex": [23, 46, 47, 48, 51, 52, 53, 54, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "nlog": 23, "draw": [23, 24, 25, 27, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "suitabl": 23, "affect": [23, 76], "geurt": [23, 24, 46, 47, 56, 82, 83], "ernst": [23, 24, 46, 47, 56, 82, 83], "wehenkel": [23, 24, 46, 47, 56, 82, 83], "machin": [23, 24, 46, 47, 48, 51, 52, 55, 56, 76, 82, 83, 93, 95, 96], "63": [23, 24, 36, 46, 47, 56, 82, 83, 103], "2006": [23, 24, 46, 47, 56, 82, 83, 90, 93], "123": [23, 24, 26], "n_cv": [23, 24, 25, 27], "n_repeat": [23, 24, 25, 27, 41, 44, 76, 79], "time_taken": [23, 24], "phishingwebsit": [23, 27], "eorf": [23, 24], "194296": 23, "190628": 23, "249546": 23, "258247": 23, "234861": 23, "960449": 23, "091442": 23, "981346": 23, "026877": 23, "955319": 23, "datetim": [23, 24, 25, 27], "fetch_openml": [23, 24, 27], "repeatedkfold": [23, 24, 25, 27], "cross_valid": [23, 24, 25, 27], "extraobliquerandomforestclassifi": [23, 24, 26], "obliquerandomforestclassifi": [23, 24, 25, 26, 27, 95], "max_sample_s": [23, 24], "phishing_websit": [23, 24], "cnae_9": 23, "data_id": [23, 24, 27], "load_cc18": [23, 24, 27], "as_fram": [23, 24, 27], "parser": [23, 24, 27], "d_name": [23, 24, 27], "frame": [23, 24, 27], "iloc": [23, 24, 25, 27], "get_scor": [23, 24, 25, 27], "kwarg": [23, 24, 25, 27, 45, 57, 58, 90, 91, 108, 109], "dim": [23, 24, 31], "tmp": [23, 24, 25, 27], "t0": [23, 24, 25, 27], "test_scor": [23, 24, 25, 27], "accuraci": [23, 24, 25, 27, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 80, 82, 84, 85, 86, 88], "convert": [23, 24, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "taken": [23, 24, 61, 63, 85, 86, 87, 95], "total_second": [23, 24], "explod": [23, 24, 25, 27], "reset_index": [23, 24, 25, 27], "inplac": [23, 24, 25, 27], "param": [23, 24, 25, 27, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "concat": [23, 24, 27], "from_dict": 23, "orient": 23, "index": [23, 30, 32, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 110], "groupbi": [23, 24], "set_size_inch": [23, 24, 27], "stripplot": [23, 25, 27], "queri": [23, 25, 27, 50], "dodg": [23, 25, 27], "boxplot": [23, 25, 27], "white": [23, 25, 27, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44], "36": [23, 28, 98], "470": [23, 28, 98], "401": 23, "plot_extra_oblique_random_forest": [23, 28, 98], "purpos": [24, 26, 94], "chang": [24, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "11055": 24, "10299": 24, "562": 24, "section": [24, 26, 62], "focu": 24, "notabl": [24, 27, 108], "grow": [24, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "linearli": [24, 32, 62], "signific": [24, 95], "sample_s": 24, "n_row": [24, 26, 31], "df_tmp": 24, "41": [24, 28, 98], "089": [24, 28, 98], "466": [24, 28, 98], "plot_extra_orf_sample_s": [24, 28, 98], "problem": [25, 46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88, 93, 100], "xor": 25, "task": [25, 26, 93], "limit": [25, 50, 100, 106], "carri": [25, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "about": [25, 96], "odd": 25, "across": [25, 30, 32, 45, 46, 48, 49, 51, 53, 55, 57, 58, 61, 62, 67, 75, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91], "greater": [25, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "otherwis": [25, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "further": 25, "public": [25, 30, 31, 32, 95], "epub": 25, "siam": [25, 53, 54, 88, 89, 90, 93, 95], "doi": [25, 53, 54, 58, 63, 65, 66, 88, 89, 95, 96, 97], "epdf": 25, "1137": [25, 53, 54, 88, 89, 95], "9781611974973": 25, "56": 25, "It": [25, 27, 38, 41, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 73, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 96, 97], "took": [25, 27], "sparse_par": 25, "p_star": 25, "random_se": [25, 26, 71, 72, 74], "OF": [25, 27], "hyper": 25, "t_d": 25, "rff": 25, "plot_sim_": 25, "jpg": 25, "932": [25, 28, 98], "plot_oblique_axis_aligned_forests_sparse_par": [25, 28, 98], "row": [26, 31, 88, 89, 107], "sepal": 26, "width": [26, 88, 89], "length": [26, 31, 45, 48, 49, 50, 51, 53, 62, 67, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "petal": 26, "third": [26, 27, 30], "extraobliquerandomforest": 26, "92": 26, "obliquerandomforest": 26, "9866666666666667": 26, "9933333333333333": 26, "listedcolormap": [26, 30, 32], "1234": [26, 73], "spectral": 26, "fine": 26, "step": [26, 45, 67], "contour": 26, "plot_step_coars": 26, "coars": 26, "guess": 26, "plot_idx": 26, "n_model": 26, "dict": [26, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "sec": 26, "std": 26, "consol": 26, "str": [26, 36, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 71, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "slice": [26, 67], "awai": 26, "useless": 26, "string": [26, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "model_titl": 26, "model_detail": 26, "hasattr": 26, "fontsiz": [26, 36, 37, 38, 39, 40, 41, 42, 43, 44], "mesh": 26, "input": [26, 30, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 111], "x_min": 26, "x_max": 26, "yy": 26, "meshgrid": 26, "either": [26, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 109], "blend": 26, "isinst": 26, "z": [26, 31, 44, 68, 71, 72, 74], "c_": 26, "contourf": 26, "choos": [26, 48, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "level": [26, 67], "respect": [26, 30, 65, 66, 85, 95, 97], "adaboost": 26, "fewer": 26, "its": [26, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 82, 84, 85, 86, 88, 96], "good": [26, 95], "enough": [26, 84], "earli": 26, "estimator_alpha": 26, "coarser": 26, "what": [26, 30, 31, 32, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "regularli": 26, "space": [26, 27, 49, 50, 57, 58, 69, 71, 85, 90, 91, 96], "outlin": 26, "xx_coarser": 26, "yy_coars": 26, "z_points_coars": 26, "cs_point": 26, "move": 26, "next": [26, 49, 63, 65, 66, 85, 94], "sequenc": [26, 67, 90], "subset": [26, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 82, 84, 85, 86, 88, 96], "12": [26, 31, 37], "obliquedecisiontre": 26, "extraobliquedecisiontre": 26, "basic": [26, 80, 81, 82, 83, 84], "decisiontre": 26, "three": [26, 27, 30], "distinct": [26, 61], "29": [26, 28, 40, 98], "097": [26, 28, 98], "2455": [26, 28, 98], "plot_oblique_forests_iri": [26, 28, 98], "31": 27, "former": [27, 56], "entir": [27, 49, 53, 54, 85, 88, 89], "latter": [27, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "normin": 27, "dub": 27, "statu": 27, "activ": [27, 94], "857": 27, "you": [27, 30, 32, 42, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 110], "notic": [27, 80, 81, 82, 83], "mechan": [27, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "practic": [27, 30, 31, 32, 95, 100], "21": [27, 45, 52, 93, 95, 103], "object": [27, 30, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "22": [27, 28, 43, 46, 47, 50, 55, 56, 80, 81, 82, 83, 98], "258": [27, 28, 98], "plot_oblique_random_forest": [27, 28, 98], "16": [28, 38, 81], "846": 28, "sparse_oblique_tre": [28, 98], "400": [28, 98], "multiviewdecisiontreeclassifi": [30, 42, 43, 44, 107, 108, 109], "oper": [30, 80, 84, 86, 88, 89], "under": [30, 39, 41, 44, 93, 112], "assumpt": 30, "hyperparamet": [30, 31, 32, 96, 107], "relat": [30, 31, 32, 45, 106, 110], "privat": [30, 31, 32], "cython": [30, 31, 32, 90, 91, 94, 105, 110], "patch": [30, 53, 54, 88, 89, 103, 107, 110], "api": [30, 31, 32, 45, 50, 57, 58, 75, 88, 89, 90, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "just": [30, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 72, 75, 94], "wrapper": [30, 31, 32], "underli": [30, 31, 32, 48, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 110], "relev": [30, 31, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "scalarmapp": [30, 32], "_criterion": [30, 31, 32], "gini": [30, 31, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "_oblique_splitt": [30, 32], "multiviewsplittertest": 30, "min_samples_leaf": [30, 31, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "min_weight_leaf": [30, 31, 32], "intp": [30, 63, 65, 66], "n_feature_set": [30, 49, 85], "max_features_per_set_": [30, 85], "monotonic_cst": [30, 31, 32, 46, 47, 55, 56, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 105], "missing_value_feature_mask": [30, 31, 32], "dummi": [30, 31, 32], "repeat": [30, 31, 63, 65, 66, 72], "float32": [30, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "float64": [30, 31, 32, 59, 60, 63, 65, 66, 81, 83, 87, 89], "expos": [30, 32], "tester": 30, "directli": [30, 31, 32, 110], "init_test": [30, 31, 32], "though": 30, "contigu": [30, 31, 53, 54, 88, 89], "projection_matrix": [30, 32], "sample_projection_matrix_pi": [30, 31, 32], "green": [30, 32], "heatmap": [30, 32], "imshow": [30, 31, 32], "aspect": [30, 32], "axvlin": [30, 36, 37, 41, 42, 44], "iend": 30, "vector": [30, 32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 63, 65, 66, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97], "set_yticklabel": [30, 32], "mappabl": [30, 32], "sm": [30, 32], "set_arrai": [30, 32], "bar": [30, 32], "tick": [30, 32], "set_label": [30, 32], "weight": [30, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 103, 110], "previou": [30, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 110, 112], "setup": [30, 63], "specifi": [30, 31, 41, 44, 46, 48, 49, 51, 53, 55, 61, 62, 63, 66, 75, 80, 82, 84, 85, 86, 88, 96, 109], "max_features_per_set": 30, "factor": [30, 45, 62, 63, 65, 66], "want": 30, "onc": [30, 76], "control": [30, 32, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 62, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 107, 109], "apply_max_features_per_feature_set": [30, 49, 85, 108, 109], "551": [30, 33, 35, 42, 98], "plot_multiview_axis_aligned_splitt": [30, 33, 98], "patchobliquedecisiontreeclassifi": [31, 53], "done": [31, 67, 88, 89, 95, 107], "data_dim": [31, 53, 54, 88, 89], "n_col": 31, "n_depth": 31, "robust": [31, 93], "hyperrectangl": 31, "start": [31, 65, 66, 94], "min_patch_dim": [31, 53, 54, 88, 89], "max_patch_dim": [31, 53, 54, 88, 89], "constrain": [31, 96], "within": [31, 48, 50, 57, 58, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94], "arbitrarili": [31, 47, 52, 54, 56, 81, 83, 87, 89], "_morf_splitt": 31, "bestpatchsplittertest": 31, "sake": [31, 32], "feature_weight": [31, 53, 54, 88, 89], "th": [31, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "appear": [31, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "dim_contigu": [31, 53, 54, 88, 89], "proj_mat": 31, "sharex": 31, "sharei": 31, "viridi": 31, "nonzero": 31, "custom": [31, 46, 47, 55, 56, 57, 58], "set_zlim": 31, "125": [31, 105], "necessarili": [31, 50, 95], "certain": 31, "n_channel": 31, "n_time": 31, "channel": 31, "612": [31, 33, 98], "225": [31, 35, 42, 98], "plot_projection_matric": [31, 33, 98], "small": [32, 45, 46, 48, 49, 51, 52, 53, 55, 57, 58, 75], "element": [32, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "candid": [32, 95, 96, 107], "bestobliquesplittertest": 32, "orang": 32, "521": [32, 33, 98], "plot_sparse_projection_matrix": [32, 33, 98], "17": [33, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "684": 33, "06": [35, 81, 98], "48": [35, 42], "246": 35, "treeple_tutorial_1_2_pvalu": [35, 41, 98], "185": [35, 41, 98], "treeple_tutorial_2_2_pvalue_multiview": [35, 44, 98], "255": [35, 44, 46, 47, 55, 56, 98], "treeple_tutorial_2_1b_cmi": [35, 43, 98], "08": [35, 45, 98], "614": [35, 43, 98], "treeple_tutorial_0_gmm": [35, 36, 98], "160": [35, 36, 98], "treeple_tutorial_2_1a_sa98_multiview": [35, 42, 98], "treeple_tutorial_1_1a_sa98": [35, 37, 98], "378": [35, 37, 98], "treeple_tutorial_1_1c_pauc": [35, 39, 98], "363": [35, 39, 98], "treeple_tutorial_1_1d_hd": [35, 40, 98], "896": [35, 40, 98], "treeple_tutorial_1_1b_mi": [35, 38, 98], "844": [35, 38, 98], "warn": [36, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 111], "multivariate_norm": 36, "metric": [36, 37, 39, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 71, 75, 76, 79, 80, 82, 84, 85, 86, 88, 93, 97, 107, 108, 109], "roc_auc_scor": [36, 39], "roc_curv": [36, 37, 39, 42], "make_trunk_mixture_classif": [36, 110], "color_cod": [36, 37, 38, 39, 40, 41, 42, 43, 44], "style": [36, 37, 38, 39, 40, 41, 42, 43, 44], "context": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75], "talk": [36, 37, 38, 39, 40, 41, 42, 43, 44], "font_scal": [36, 37, 38, 39, 40, 41, 42, 43, 44], "palett": [36, 37, 38, 39, 40, 41, 42, 43, 44], "color_palett": [36, 37, 38, 39, 40, 41, 42, 43, 44], "set1": [36, 37, 38, 39, 40, 41, 42, 43, 44], "set_palett": [36, 37, 38, 39, 40, 41, 42, 43, 44], "n_color": [36, 37, 38, 39, 40, 41, 42, 43, 44], "set_styl": [36, 37, 38, 39, 40, 41, 42, 43, 44], "dddddd": [36, 37, 38, 39, 40, 41, 42, 43, 44], "filterwarn": 36, "know": [36, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "suffici": 36, "amount": [36, 45, 48, 82, 83], "n_dim": [36, 37, 38, 39, 40, 41, 42, 43, 44, 59, 60, 63, 65, 66], "n_inform": [36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 51, 52, 54, 55, 56, 63, 65, 66], "mu_0": [36, 37, 38, 39, 40, 41, 42, 43, 44, 65, 66], "mu_1": [36, 37, 38, 39, 40, 41, 42, 43, 44, 65, 66], "mix": [36, 66], "tick_param": [36, 37, 38, 39, 40, 41, 42, 43, 44], "labels": [36, 37, 38, 39, 40, 41, 42, 43, 44], "histogram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 55, 56], "frameon": [36, 37, 38, 39, 40, 41, 42, 43, 44], "f_": [36, 41, 44], "mathbb": [36, 37, 39, 42], "pdf_class0": 36, "compon": [36, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "pdf_class1_0": 36, "pdf_class1_1": 36, "pdf_class1": 36, "balanc": [36, 46, 48, 49, 51, 53, 55, 59, 60, 75, 80, 82, 84, 85, 86, 88], "p_x": 36, "frac": [36, 39, 40, 47, 52, 54, 56, 69, 70, 81, 83, 87, 89, 97], "pos_class0": 36, "pos_class1": 36, "po": [36, 39], "calculate_sa": [36, 37, 42], "y_pred_proba": [36, 37, 38, 39, 40, 42, 43], "max_fpr": [36, 37, 39, 42], "sensit": [36, 37, 42, 76, 79], "ndim": [36, 37, 39, 42], "rais": [36, 37, 39, 42, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 111], "valueerror": [36, 37, 39, 42, 111], "must": [36, 37, 39, 42, 46, 48, 49, 51, 52, 53, 55, 61, 63, 65, 66, 72, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 90, 91], "1d": [36, 37, 39, 42, 50, 53, 54, 61, 88, 89], "find": [36, 37, 39, 42, 47, 50, 52, 54, 56, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 106], "fpr": [36, 37, 39, 42], "tpr": [36, 37, 39, 42], "pos_label": [36, 37, 39, 42], "drop_intermedi": [36, 37, 39, 42], "sa98": [36, 37, 42], "005": [36, 37, 39, 42, 72, 74], "rate": [36, 37, 39, 42, 107], "roc": [36, 37, 39, 42], "spec": [36, 37, 42], "ymin": [36, 37, 42], "ymax": [36, 37, 42], "linestyl": [36, 37, 39, 41, 42, 44], "axhlin": [36, 37, 42], "xmin": [36, 37, 42], "xmax": [36, 37, 42], "27": 36, "calculate_mi": [36, 38, 43], "h_yx": [36, 38, 43], "empir": [36, 38, 43, 48, 56, 75, 84, 96], "return_count": [36, 38, 43], "h_y": [36, 38, 43, 60], "calculate_pauc": [36, 39], "make_trunk_classif": [37, 38, 39, 40, 41, 42, 43, 44, 63, 109, 110], "build_oob_forest": [37, 38, 39, 40, 42, 43], "eta": [37, 39, 40, 42], "t_r": [37, 39, 42], "With": [37, 38, 39, 40, 41, 42, 43, 44], "bootstrap": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 76, 77, 78, 79, 95, 109, 111], "observe_proba": [37, 38, 39, 40, 42, 43], "nanmean": [37, 38, 39, 40, 42, 43], "h": [38, 40, 41, 68, 69, 70, 96], "partial": 39, "integr": [39, 59, 63], "percentag": 39, "Then": [39, 79, 92, 94], "int_": 39, "infti": 39, "mathcal": [39, 61, 97], "x_1": [39, 61], "x_0": 39, "df_1": 39, "df_0": 39, "90": [39, 45], "59": 39, "quantifi": 40, "bigl": 40, "bigr": 40, "_2": [40, 97], "calculate_hd": 40, "hd": 40, "permutationhonestforestclassifi": [41, 44, 79, 110], "build_coleman_forest": [41, 44, 110], "hypothesi": [41, 44, 63, 65, 66, 76, 77, 78, 79, 93, 105, 106, 107, 110], "altern": [41, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95], "h_0": [41, 44], "xy": 41, "f_x": 41, "f_y": 41, "h_a": [41, 44], "neq": [41, 44], "null": [41, 44, 76, 79, 108, 109], "would": [41, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 107, 110, 112], "reject": [41, 44], "confirm": [41, 44], "equal": [41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 107], "becom": [41, 44, 63, 65, 66], "larger": [41, 44, 45, 48, 67, 75, 84, 95], "construct": [41, 44, 57, 58, 76, 79, 84, 95, 96], "output": [41, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100, 103, 110], "vale": [41, 44], "anoth": [41, 44, 96, 108, 109], "est_nul": [41, 44], "conduct": [41, 44], "observed_diff": [41, 44], "pvalu": [41, 44, 76, 79], "mix_diff": [41, 44], "return_posterior": [41, 44, 76, 79], "diff": [41, 44], "out": [42, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 77, 78, 79, 95, 109, 110], "simpler": [42, 97], "z_x": [42, 43, 44], "z_x_y": [42, 43, 44], "scatterplot": [42, 43, 44], "kdeplot": [42, 43, 44], "tree_estim": [42, 43, 44, 48, 75, 84, 110], "joint": [43, 44, 62], "single_proba": 43, "joint_mi": 43, "x_null": 44, "insert": 44, "covariate_index": [44, 75, 76, 79, 107], "auto": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "contamin": 45, "verbos": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 77, 78, 79, 94], "warm_start": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "read": [45, 46, 47, 51, 52, 55, 56, 80, 81, 82, 83, 84, 86, 87], "default": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 106, 111], "256": [45, 63, 65, 66], "proport": [45, 46, 48, 49, 51, 53, 55, 75, 77, 80, 82, 84, 85, 86, 88], "paper": [45, 63, 76, 95, 96], "n_features_in_": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "enabl": [45, 48, 76, 77, 78, 79, 90, 104, 105], "lead": [45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 86, 87, 95, 110], "longer": 45, "bool": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "individu": 45, "consid": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 106], "extraobliquedecisiontreeregressor": [45, 105], "job": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 71, 75], "parallel": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 76, 79], "unless": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "joblib": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 94], "parallel_backend": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75], "processor": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75], "glossari": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 67, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "pseudo": 45, "branch": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "reus": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75], "whole": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75], "attribut": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 110], "estimator_": [45, 46, 47, 55, 56, 57, 58, 84], "extratreeregressor": [45, 47, 82], "child": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "templat": [45, 46, 47, 48, 55, 56, 57, 58, 75, 84], "sub": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 109], "estimators_features_": 45, "ndarrai": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "estimators_samples_": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 78], "max_samples_": 45, "offset_": 45, "offset": 45, "raw": 45, "score_sampl": 45, "expect": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 81, 83, 86, 87, 88, 89, 95], "seen": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "24": [45, 46, 47, 55, 56, 80, 81, 82, 83], "feature_names_in_": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "ellipticenvelop": 45, "svm": 45, "oneclasssvm": 45, "unsupervis": [45, 57, 58, 90, 91, 93, 100, 103, 105], "support": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 103, 108, 109], "libsvm": 45, "localoutlierfactor": 45, "local": [45, 94], "lof": 45, "ceil": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "log_2": 45, "liu": 45, "et": [45, 76, 93], "al": [45, 76, 93], "2008": [45, 63, 65, 66], "refer": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 69, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "fei": 45, "toni": 45, "ting": 45, "kai": 45, "ming": 45, "zhou": 45, "zhi": 45, "hua": 45, "mine": [45, 58, 90, 97], "icdm": 45, "eighth": 45, "confer": [45, 58, 90, 97], "acm": [45, 58, 97], "discoveri": [45, 58, 97], "tkdd": 45, "2012": 45, "sever": [45, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "n_left": 45, "path": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "array_lik": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 67, 68, 69, 70, 72, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "csr_matrix": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "abnorm": 45, "doe": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96], "NOT": 45, "mai": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "thread": 45, "cpu": [45, 57, 58], "effici": [45, 50, 57, 58, 76, 81, 83, 87, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "csc_matrix": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "Not": [45, 50, 57, 58, 85, 86, 87, 88, 89, 90, 91], "convent": [45, 50, 57, 58, 90, 91], "self": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "fit_predict": [45, 57, 58, 90, 91], "get_metadata_rout": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "metadata": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "rout": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "metadatarout": 45, "encapsul": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "get_param": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "deep": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95], "subobject": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "is_inli": 45, "tell": 45, "accord": [45, 50, 76, 79], "opposit": 45, "set_fit_request": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "unchang": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "request": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "enable_metadata_rout": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "set_config": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "option": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 106], "meta": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "error": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 111], "alia": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "metadata_rout": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "retain": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "exist": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "insid": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 103], "pipelin": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "effect": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99], "updat": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "nest": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "__": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "properti": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 106, 109], "dynam": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "identifi": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 97], "member": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "bag": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 77, 78, 79, 109, 110], "re": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "reduc": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 86, 87, 95], "footprint": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "fetch": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "slower": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "min_samples_split": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 105], "min_weight_fraction_leaf": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "max_leaf_nod": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "min_impurity_decreas": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "oob_scor": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "class_weight": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "ccp_alpha": [46, 47, 48, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "max_bin": [46, 47, 55, 56], "store_leaf_valu": [46, 47, 55, 56, 80, 81, 82, 83, 85, 86, 87, 88, 89], "log_loss": [46, 55, 80, 82], "qualiti": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97], "criteria": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "impur": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96], "shannon": [46, 55, 80, 82], "gain": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "mathemat": [46, 53, 54, 55, 57, 58, 80, 82, 88, 89, 93, 95, 100], "formul": [46, 55, 57, 58, 80, 82, 100], "expand": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "until": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "pure": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "fraction": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "18": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "least": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 110], "smooth": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "especi": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "log2": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 105], "stop": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "partit": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 69, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96], "found": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "rel": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97], "reduct": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "unlimit": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "induc": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "decreas": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95], "equat": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "n_t": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "n_t_r": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "right_impur": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "n_t_l": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "left_impur": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "current": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96], "19": [46, 47, 55, 56, 80, 81, 82, 83], "callabl": [46, 47, 55, 56, 57, 58, 61, 72, 74, 90, 91], "accuracy_scor": [46, 55], "signatur": [46, 47, 55, 56, 57, 58], "decision_path": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "balanced_subsampl": [46, 48, 49, 51, 53, 55, 75], "associ": [46, 48, 49, 51, 53, 55, 58, 66, 75, 80, 82, 84, 85, 86, 88, 96, 97], "class_label": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "suppos": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "multioutput": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "multilabel": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "everi": [46, 48, 49, 51, 53, 54, 55, 75, 80, 82, 84, 85, 86, 88, 89, 96], "mode": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88, 94], "automat": [46, 48, 49, 51, 53, 55, 67, 75, 80, 82, 84, 85, 86, 88], "adjust": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "invers": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "frequenc": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "bincount": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "except": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 81, 83, 87, 89, 95], "grown": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 80, 81, 82, 83, 84, 86, 87], "multipli": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "through": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "minim": [46, 47, 48, 52, 54, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97], "cost": [46, 47, 48, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96], "subtre": [46, 47, 48, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "largest": [46, 47, 48, 55, 56, 72, 75, 80, 81, 82, 83, 84], "post": [46, 47, 55, 56, 80, 81, 82, 83], "miss": [46, 47, 55, 56, 80, 81, 82, 83, 84, 96, 111], "experiment": [46, 47, 55, 56, 80, 81, 82, 83, 85, 93, 105, 106, 107], "get_leaf_node_sampl": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "monoton": [46, 47, 55, 56, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "enforc": [46, 47, 48, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "multiclass": [46, 55, 80, 82, 84], "n_outputs_": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "hold": [46, 55, 80, 82, 84], "extratreeclassifi": [46, 83], "base_estimator_": [46, 47, 55, 56], "renam": [46, 47, 55, 56, 112], "classes_": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "n_classes_": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "feature_importances_": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 106], "oob_score_": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "oob_decision_function_": [46, 48, 49, 51, 52, 53, 55, 57, 58, 75], "n_output": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "never": [46, 48, 49, 51, 52, 53, 55, 57, 58, 75], "extratreesregressor": [46, 56, 82, 83], "optim": [46, 47, 88, 89, 96, 110], "etc": [46, 47, 48, 51, 52, 53, 54, 55, 56, 71, 80, 81, 82, 83, 84, 86, 87], "fulli": [46, 47, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 86, 87], "unprun": [46, 47, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 86, 87], "potenti": [46, 47, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 86, 87, 89], "consumpt": [46, 47, 48, 51, 52, 53, 54, 55, 56, 80, 81, 82, 83, 84, 86, 87], "make_classif": [46, 48, 51, 55], "x_leav": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "datapoint": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "up": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109], "n_node": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "goe": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "csr": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "n_nodes_ptr": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "give": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 84, 86, 87], "real": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 81, 83, 87, 89], "net": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "possibli": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 61, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "leaf_node_sampl": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "reach": [46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "n_leaf_node_sampl": [46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "sinc": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "metadatarequest": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "partial_fit": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88, 93, 105], "subsequ": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "That": [46, 48, 49, 51, 53, 55, 57, 58, 75, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91], "highest": [46, 48, 49, 51, 53, 55, 57, 58, 75, 80, 84, 86], "predict_log_proba": [46, 48, 49, 51, 53, 55, 75, 80, 82, 85, 86, 88], "log": [46, 48, 49, 51, 53, 55, 69, 70, 75, 80, 82, 85, 86, 88, 96, 97], "predict_quantil": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "keyword": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 105, 106, 109], "accept": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 71, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "n_quantil": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75], "harsh": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "correctli": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88, 108, 109, 110], "w": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 63, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "set_partial_fit_request": [46, 48, 49, 51, 53, 55, 75, 80, 82, 84, 85, 86, 88], "set_score_request": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "brought": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91], "mislead": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95], "cardin": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95], "mani": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95, 96, 105], "permutation_import": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91], "root": [46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 107], "squared_error": [47, 52, 54, 56, 81, 83, 87, 89], "absolute_error": [47, 52, 54, 56, 81, 83, 87, 89], "friedman_ms": [47, 52, 54, 56, 81, 83, 87, 89], "poisson": [47, 52, 54, 56, 81, 83, 87, 89], "l2": [47, 52, 54, 56, 81, 83, 87, 89], "loss": [47, 52, 54, 56, 81, 83, 87, 89, 96], "termin": [47, 52, 54, 56, 81, 83, 87, 89], "friedman": [47, 52, 54, 56, 80, 81, 83, 84, 86, 87, 89, 96], "absolut": [47, 52, 54, 56, 81, 83, 87, 89], "l1": [47, 52, 54, 56, 81, 83, 87, 89], "devianc": [47, 52, 54, 56, 81, 83, 87, 89], "mae": [47, 56, 81, 83], "r2_score": [47, 52, 54, 56, 81, 83, 87, 89], "decisiontreeregressor": [47, 56, 80, 83, 87, 89], "oob_prediction_": [47, 54, 56], "extratreesclassifi": [47, 55, 82, 83], "load_diabet": [47, 81, 83, 87, 89], "return_x_i": [47, 81, 82, 83, 87, 89], "reg": [47, 83], "2727": 47, "coeffici": [47, 52, 54, 56, 81, 83, 87, 89], "residu": [47, 52, 54, 56, 81, 83, 87, 89], "wors": [47, 52, 54, 56, 81, 83, 87, 89], "constant": [47, 52, 54, 56, 81, 83, 87, 89], "alwai": [47, 48, 49, 51, 52, 53, 54, 55, 56, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96], "disregard": [47, 52, 54, 56, 81, 83, 87, 89], "precomput": [47, 50, 52, 54, 56, 81, 83, 87, 89], "kernel": [47, 52, 54, 56, 64, 81, 83, 87, 89, 103], "n_samples_fit": [47, 52, 54, 56, 81, 83, 87, 89], "uniform_averag": [47, 52, 54, 56, 81, 83, 87, 89], "23": [47, 52, 54, 56, 76, 81, 83, 87, 89, 94], "keep": [47, 52, 54, 56, 81, 83, 87, 89, 110], "influenc": [47, 52, 54, 56, 81, 83, 87, 89], "multioutputregressor": [47, 52, 54, 56, 81, 83, 87, 89], "tree_estimator_param": [48, 75, 84], "remain": [48, 75, 84], "deal": [48, 75, 84], "shallow": [48, 75, 84], "honesti": [48, 75, 93, 96], "instanti": [48, 84], "basedecisiontre": [48, 50, 84, 92], "need": [48, 80, 81, 82, 83, 84, 94, 96, 99], "resampl": [48, 67, 107], "honest_decision_function_": [48, 75], "structure_indices_": [48, 75, 84], "n_structur": [48, 75, 84], "honest_indices_": [48, 75, 84], "n_honest": [48, 75, 84], "oob_samples_": [48, 49, 51, 52, 53, 54, 75, 78, 109, 110], "n_samples_bootstrap": [48, 75], "ident": [48, 51, 52, 53, 54, 55, 56, 63, 65, 66, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91], "determinist": [48, 51, 52, 53, 54, 55, 56, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91], "behaviour": [48, 51, 52, 53, 54, 55, 56, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91], "unbias": 48, "doubl": 48, "access": 48, "ineffici": 48, "recommend": [48, 57, 58, 86, 87, 88, 89, 93, 96], "propens": [48, 96], "causal": 48, "breiman": [48, 51, 52, 55, 56, 80, 81, 84, 86, 87, 95, 96], "45": [48, 51, 52, 55, 56, 62, 69, 95, 96, 103], "32": [48, 51, 52, 55, 56, 95, 96], "2001": [48, 51, 52, 55, 56, 95, 96], "athei": [48, 84], "tibshirani": [48, 62, 80, 81, 84, 86, 87, 96], "wager": [48, 84], "annal": [48, 62, 63, 65, 66, 84], "honest_forest": [48, 84], "n_redund": [48, 51, 55], "fit_param": [48, 57, 58, 90, 91], "predict_proba_per_tre": [48, 49, 51, 53, 75, 110], "proba_per_tre": [48, 49, 51, 53, 75], "tradit": [49, 51, 52, 86, 87], "assum": [49, 85, 111], "per": [49, 61, 75, 77, 78, 85, 103, 107, 108, 109, 110], "n_features_": [49, 51, 52, 53, 54, 75], "compute_similarity_matrix": [49, 51, 52, 53, 54, 57, 58, 85, 86, 87, 88, 89, 90, 91], "sim_matrix": [49, 51, 52, 53, 54, 57, 58, 85, 86, 87, 88, 89, 90, 91], "n_neighbor": 50, "radiu": [50, 71, 72, 74], "baseforest": [50, 92], "kneighbor": 50, "radius_neighbor": 50, "get_estim": 50, "return_dist": 50, "n_queri": 50, "n_index": 50, "constructor": 50, "neigh_dist": 50, "neigh_ind": 50, "popul": 50, "sort_result": 50, "ly": 50, "ball": 50, "around": [50, 105], "befor": [50, 61, 72, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91], "approxim": [50, 59, 60, 109], "lie": 50, "cannot": 50, "obliquedecisiontreeregressor": [52, 54, 103], "tomita": [52, 53, 54, 88, 89, 93, 95], "journal": [52, 53, 54, 76, 88, 89, 93, 95], "research": [52, 76, 93, 95], "104": [52, 93, 95], "39": [52, 81, 93, 95], "2020": [52, 58, 93, 95, 97], "make_regress": [52, 54, 56], "regr": [52, 56], "86327109": 52, "along": [53, 54, 73, 88, 89, 96], "presum": [53, 54, 88, 89], "un": [53, 54, 88, 89], "wrap": [53, 54, 88, 89], "adam": [53, 54, 88, 89, 93, 95, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "chester": [53, 54, 88, 89, 95], "huynh": [53, 54, 88, 89, 95], "tyler": [53, 54, 88, 89, 93, 95], "jesu": [53, 54, 88, 89, 95], "jess": [53, 54, 88, 89, 95], "patsol": [53, 54, 88, 89, 95], "ben": [53, 54, 88, 89, 95], "falk": [53, 54, 88, 89, 95], "sridevi": [53, 54, 88, 89, 95], "sarma": [53, 54, 88, 89, 95], "toward": [53, 54, 88, 89, 93, 95], "gap": [53, 54, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95], "convolut": [53, 54, 88, 89, 93, 95], "network": [53, 54, 88, 89, 93, 95], "scienc": [53, 54, 88, 89, 93, 95], "77": [53, 54, 88, 89, 93, 95], "96": [53, 54, 88, 89, 93, 95], "2023": [53, 54, 62, 88, 89, 93, 95], "21m1449117": [53, 54, 88, 89, 95], "patchobliquedecisiontreeregressor": [54, 103], "82818509": 54, "gradient": [55, 56], "boost": [55, 56], "histgradientboostingclassifi": 55, "fast": [55, 56, 90, 100], "big": [55, 56], "10_000": [55, 56], "histgradientboostingregressor": 56, "rather": [56, 75, 97], "suggest": 56, "recent": 56, "justifi": 56, "32987858": 56, "twomean": [57, 58, 90, 91], "clustering_func": [57, 58, 90, 91], "clustering_func_arg": [57, 58, 90, 91], "simultan": [57, 58], "affin": [57, 58, 90, 91], "fastbic": [57, 58, 90, 91, 103], "maxim": [57, 58], "bayesian": [57, 58, 97], "calinski_harabasz_scor": [57, 58], "predicted_label": [57, 58], "silhouette_scor": [57, 58], "davies_bouldin_scor": [57, 58], "continu": [57, 58], "instant": [57, 58], "agglomerativeclust": [57, 58, 90, 91], "unsuperviseddecisiontre": [57, 58], "labels_": [57, 58], "int64": [57, 58, 90, 91], "fit_transform": [57, 58, 90, 91], "transform": [57, 58, 61, 62, 71, 90, 91], "x_new": [57, 58, 90, 91], "n_features_new": [57, 58, 90, 91], "set_output": [57, 58, 90, 91], "introduc": [57, 58, 90, 91, 110], "configur": [57, 58, 90, 91], "typic": [57, 58, 90, 91, 96], "dens": [57, 58, 63, 65, 66, 90, 91, 96], "meghana": [58, 93, 97], "madhyastha": [58, 93, 97], "perci": [58, 97], "jame": [58, 95, 97], "brown": [58, 95, 97], "veronika": [58, 97], "strnadova": [58, 97], "neelei": [58, 97], "carei": [58, 95, 97], "prieb": [58, 95, 97], "randal": [58, 95, 97], "burn": [58, 95, 97], "geodes": [58, 71, 90, 93, 97], "proceed": [58, 90, 97], "26th": [58, 97], "sigkdd": [58, 97], "kdd": [58, 93, 97], "513": [58, 93, 97], "523": [58, 93, 97], "york": [58, 97], "ny": [58, 97], "usa": [58, 97], "machineri": [58, 97], "url": [58, 62, 63, 65, 66, 95, 97], "1145": [58, 97], "3394486": [58, 97], "3403094": [58, 97], "cov": [59, 60, 65, 66, 68, 69, 70, 73], "class_prob": [59, 60, 61], "718281828459045": [59, 60], "arraylik": [59, 60, 65, 66, 71, 76, 77, 78, 79], "bit": [59, 60], "logarithm": [59, 60], "i_xi": [59, 60], "h_x": 59, "mixtur": [59, 61, 63, 66, 110], "h_xy": 59, "int_err": 59, "100000": 60, "h_y_on_x": 60, "noise_dim": 61, "return_lat": 61, "add_latent_nois": 61, "nonlinear": 61, "latent": 61, "2d": [61, 73, 80, 81, 82, 83, 88, 89], "match": [61, 95], "divid": 61, "poli": 61, "membership": 61, "p_i": 61, "mu_i": 61, "sigma_i": 61, "y_1": 61, "x_": 61, "np_i": 61, "y_": 61, "overset": 61, "sim": 61, "ey": 61, "shuffle_random_st": 61, "n_view": 62, "joint_rank": 62, "noise_std": 62, "return_decomp": 62, "rank": [62, 71, 95], "share": 62, "common": [62, 96, 97], "strength": 62, "orthonorm": 62, "view_load": 62, "n_features_i": [62, 71], "rotat": 62, "sval": 62, "singular": 62, "w_b": 62, "n_features_b": 62, "preserv": [62, 67], "inner": [62, 96], "product": [62, 96], "unitari": 62, "x_b": 62, "diag": 62, "e_b": 62, "yunjin": 62, "choi": 62, "jonathan": 62, "taylor": 62, "princip": 62, "2590": 62, "2617": 62, "2017": 62, "jstor": 62, "stabl": 62, "26362952": 62, "visit": 62, "26": [62, 98], "4096": [63, 65, 66], "rho": [63, 65, 66], "band_typ": [63, 65, 66], "ma": [63, 65, 66], "return_param": [63, 65, 66], "scaling_factor": [63, 65, 66], "marron": [63, 110], "wand": [63, 110], "band": [63, 65, 66, 109], "skewed_unimod": 63, "strongly_skew": 63, "kurtotic_unimod": 63, "bimod": 63, "separated_bimod": 63, "skewed_bimod": 63, "trimod": 63, "claw": 63, "double_claw": 63, "asymmetric_claw": 63, "asymmetric_double_claw": 63, "smooth_comb": 63, "discrete_comb": 63, "trunk": [63, 65, 66, 109, 110], "steve": 63, "matt": 63, "exact": [63, 96], "712": 63, "736": 63, "1992": [63, 110], "peter": [63, 65, 66], "bickel": [63, 65, 66], "elizaveta": [63, 65, 66], "levina": [63, 65, 66], "februari": [63, 65, 66], "dx": [63, 65, 66], "1214": [63, 65, 66], "009053607000000758": [63, 65, 66], "gerard": [63, 65, 66], "coleman": [63, 65, 66, 76], "tran": [63, 65, 66, 69], "pattern": [63, 65, 66, 97], "anal": [63, 65, 66], "mach": [63, 65, 66], "intel": [63, 65, 66], "343": [63, 65, 66], "345": [63, 65, 66], "1982": [63, 65, 66], "1109": [63, 65, 66], "tpami": [63, 65, 66], "4767256": [63, 65, 66], "quadrat": 64, "sambit": [64, 103, 105, 106, 110, 111], "interpret": 64, "characterist": 64, "preprint": [64, 93], "1812": 64, "00029": 64, "2018": 64, "ratio": [65, 66], "x_mixtur": 66, "conditional_arrai": 67, "nn_estim": 67, "replace_nbr": 67, "condition": [67, 72], "procedur": [67, 96], "modif": 67, "techniqu": [67, 97], "place": 67, "resampled_arrai": 67, "impact": 67, "x_index": 68, "y_index": 68, "z_index": 68, "true_mi": [68, 69, 70], "plug": 68, "entropy_gaussian": 68, "det": [69, 70], "georg": 69, "darbellai": 69, "igor": 69, "vajda": 69, "inf": 69, "theori": [69, 95], "1315": 69, "1321": 69, "1999": 69, "kd_tree": 71, "ksg": 71, "n_features_x": 71, "n_features_z": 71, "unsupervisedobliquerandomforest": 71, "knn": 71, "ball_tre": 71, "brute": 71, "preprocess": 71, "val": 71, "proce": 71, "kth": 71, "nbr": 71, "xyz": 71, "nn": [71, 90], "xz": 71, "yz": 71, "psi": 71, "n_x": 71, "n_y": 71, "n_": [71, 96], "digamma": 71, "term": [71, 72, 96, 97, 110], "n_i": 71, "denot": [71, 72, 96], "could": [71, 80, 81, 82, 83], "radius_a": 72, "radius_b": 72, "obs_noise_func": 72, "nature_noise_func": 72, "return_mi_lb": [72, 74], "helix": 72, "smallest": 72, "defauult": 72, "func": 72, "independ": [72, 76, 96], "lb": [72, 74], "approx": 72, "unif": 72, "afterward": 72, "epsilon_1": 72, "co": [72, 111], "n_1": 72, "epsilon_2": 72, "n_2": 72, "epsilon_3": 72, "n_3": 72, "And": 72, "graphic": 72, "rightarrow": 72, "confound": 72, "impli": 72, "feed": 73, "noise_func": 74, "sphere": 74, "latitud": 74, "longitud": 74, "coordin": 74, "y2": 74, "y3": 74, "permute_per_tre": 75, "namespac": 75, "permutation_indices_": 75, "were": [75, 106, 110, 111], "covariate_index_": 75, "Will": 75, "perm_est": [76, 79], "use_spars": [76, 78], "metric_kwarg": [76, 79], "2022": [76, 90, 93], "metric_forest": 76, "metric_perm_forest": 76, "most": [76, 77, 78, 79, 95, 96, 108], "n_covari": [76, 79], "doesn": 76, "observe_stat": [76, 79], "permute_stat_": [76, 79], "subtract": [76, 79], "observe_stat_": [76, 79], "orig_forest_proba": [76, 79], "perm_forest_proba": [76, 79], "null_dist": 76, "tim": 76, "wei": 76, "peng": 76, "luca": 76, "mentch": 76, "scalabl": 76, "7679": 76, "7713": 76, "return_indic": 77, "fold": 77, "all_proba_list": 77, "train_idx_list": 77, "test_idx_list": 77, "est_kwarg": 78, "oob": [78, 111], "all_proba": 78, "permutaiton": 79, "But": [80, 81, 84, 85, 86, 87, 88, 89, 90, 91], "tree_": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "node_id": [80, 81, 82, 83], "xxx": [80, 81, 82, 83], "moreov": [80, 81, 82, 83, 96, 105, 106], "upon": [80, 81, 82, 83], "twice": [80, 81, 82, 83], "ram": [80, 81, 82, 83], "diskspac": [80, 81, 82, 83], "max_features_": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "_tree": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "understand": [80, 81, 82, 83, 84, 95], "min_samples_split_": [80, 81, 82, 83], "min_weight_leaf_": [80, 81, 82, 83], "min_samples_leaf_": [80, 81, 82, 83], "monotonic_cst_": [80, 81, 82, 83], "argmax": [80, 84, 86], "ti": [80, 84, 86], "lowest": [80, 84, 86], "en": [80, 81, 84, 86, 87, 96], "wikipedia": [80, 81, 84, 86, 87, 96], "wiki": [80, 81, 84, 86, 87, 96], "decision_tree_learn": [80, 81, 84, 86, 87, 96], "olshen": [80, 81, 84, 86, 87], "stone": [80, 81, 84, 86, 87], "wadsworth": [80, 81, 84, 86, 87], "belmont": [80, 81, 84, 86, 87], "ca": [80, 81, 84, 86, 87], "1984": [80, 81, 84, 86, 87], "hasti": [80, 81, 84, 86, 87, 96], "springer": [80, 81, 84, 86, 87, 96], "2009": [80, 81, 84, 86, 87, 96], "cutler": [80, 81, 84, 86, 87], "berkelei": [80, 81, 84, 86, 87], "edu": [80, 81, 84, 86, 87], "randomforest": [80, 81, 84, 86, 87], "cc_home": [80, 81, 84, 86, 87], "htm": [80, 81, 84, 86, 87], "93": [80, 86], "86": [80, 86, 103], "check_input": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "bypass": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "don": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "node_count": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "cost_complexity_pruning_path": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "ccp_path": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "bunch": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "leaf_nodes_sampl": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "get_n_leav": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "n_leav": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "proba": [80, 82, 84, 85, 86, 88], "set_predict_proba_request": [80, 82, 84, 85, 86, 88], "set_predict_request": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "46": 81, "11": [81, 98, 103], "pick": [82, 83], "baggingclassifi": 82, "extra_tre": [82, 83], "cl": 82, "8947": 82, "baggingregressor": 83, "occur": [84, 93], "after": [84, 107], "empirical_prior_": 84, "93333333": 84, "logic": 85, "abov": 85, "feature_combinations_": [85, 86, 87], "feature_set_ends_": 85, "n_feature_sets_": 85, "fact": [86, 87], "caveat": [86, 87], "willing": [86, 87, 96], "spend": [86, 87, 96], "resourc": [86, 87, 96], "68908909": 87, "35854406": 87, "35223873": 87, "03616902": 87, "56008907": 87, "32235221": 87, "06945264": 87, "1465216": 87, "34597007": 87, "15308512": 87, "morf": [88, 89, 93, 103], "discontigu": [88, 89], "sensor": [88, 89], "min_patch_dims_": [88, 89], "max_patch_dims_": [88, 89], "data_dims_": [88, 89], "mask": [88, 89], "onto": [88, 89], "data_width": [88, 89], "data_height": [88, 89], "tt": [88, 89], "last": [88, 89], "height": [88, 89], "exactli": [88, 89, 95], "albeit": [88, 89, 106], "efficienc": [88, 89], "rg": 89, "10163671": 89, "78786738": 89, "01490768": 89, "32737289": 89, "24816698": 89, "41881754": 89, "0588273": 89, "48722913": 89, "07927208": 89, "15600762": 89, "unsupervisedcriterion": [90, 91], "abid": [90, 91], "unsupervisedsplitt": [90, 91], "enablescomput": 90, "describ": [90, 96], "alexand": 90, "marx": 90, "jona": 90, "fischer": 90, "sdm": 90, "415": 90, "423": 90, "evimaria": 90, "terzi": 90, "panayioti": 90, "tsapara": 90, "316": 90, "327": 90, "intermedi": 92, "aff_matrix": 92, "modern": 93, "supervis": [93, 97, 100], "strong": 93, "madhyastha2020": 93, "sporf": 93, "tomita2020": 93, "li2023": 93, "perry2021": 93, "hariri2019": 93, "increment": 93, "xu2022": 93, "meinshausen2006": 93, "encourag": 93, "pull": 93, "walk": 93, "contribut": [93, 95, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "licens": 93, "polyform": 93, "noncommerci": 93, "meinshausen": 93, "nicolai": 93, "greg": 93, "ridgewai": 93, "xu": [93, 103, 105, 109, 112], "haoyin": [93, 103, 105, 109, 112], "simplest": 93, "stream": [93, 105], "2110": 93, "08483": 93, "releas": [93, 105, 106, 108, 109, 110, 111, 112], "histori": 93, "unreleas": [93, 101], "instal": 93, "pip": 93, "meson": 93, "conda": 93, "pypi": [94, 112], "clone": 94, "repositori": 94, "git": 94, "com": 94, "neurodata": 94, "cd": 94, "virtual": 94, "dev": 94, "build_requir": 94, "txt": 94, "spin": 94, "cli": 94, "abl": [94, 99, 107], "edit": 94, "pend": 94, "repo": 94, "zipbal": 94, "master": 94, "forg": 94, "threadpoolctl": 94, "pytest": 94, "compil": [94, 110], "llvm": 94, "openmp": 94, "directori": 94, "obliquepr": 94, "pr": 94, "checkout": 94, "instruct": 94, "divers": 95, "sometim": 95, "slight": 95, "aim": 95, "motiv": 95, "therebi": [95, 96], "often": [95, 97], "yield": 95, "overal": 95, "intuit": [95, 96], "leo": 95, "assess": 95, "final": [95, 96, 105], "essenti": 95, "abil": [95, 110], "mdi": 95, "l2014": 95, "suffer": 95, "flaw": 95, "conclus": 95, "deriv": 95, "held": 95, "secondli": 95, "favor": 95, "explor": 95, "whose": 95, "jaewon": 95, "chung": 95, "benjamin": 95, "jason": 95, "yim": 95, "mauro": 95, "maggioni": 95, "jmlr": 95, "v21": 95, "664": 95, "loupp": 95, "phd": 95, "thesi": 95, "lieg": 95, "2014": 95, "dt": 96, "ot": 96, "ref": 96, "rc": 96, "landmark": 96, "varieti": [96, 97], "major": [96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "definit": 96, "x_i": [96, 97], "recurs": 96, "manner": 96, "orthogon": 96, "a_i": 96, "langl": 96, "rangl": 96, "entri": 96, "rest": 96, "let": 96, "q_m": 96, "n_m": 96, "t_m": 96, "x_j": 96, "leq": 96, "setminu": 96, "e_i": 96, "basi": 96, "elsewher": 96, "_featur": 96, "come": 96, "sparsiti": 96, "consider": 96, "pickl": 96, "disc": 96, "special": 96, "earlier": 96, "sai": 96, "analysi": 96, "much": 96, "storag": 96, "ask": 96, "question": 96, "gridsearchcv": 96, "There": 96, "imput": 96, "1023": 96, "1010933404324": 96, "predictive_analyt": 96, "quinlan": 96, "c4": 96, "program": 96, "morgan": 96, "kaufmann": 96, "1993": 96, "prevent": 96, "overfit": 96, "triplet": 96, "treatment": 96, "sacrific": 96, "mse": 96, "goal": 97, "overview": 97, "cutpoint": 97, "cutoff": 97, "min_": 97, "sum_": 97, "hat": 97, "mu": 97, "_1": 97, "sample_indic": 97, "popular": 97, "seleciton": 97, "kmean": 97, "mclust": 97, "tri": 97, "mle": 97, "hard": 97, "soft": 97, "gmm": 97, "x_n": 97, "quad": 97, "le": 97, "mu_j": 97, "notion": 97, "efficaci": 97, "scheme": 97, "adjusted_rand_scor": 97, "28": 98, "999": 98, "tip": [100, 101], "enhanc": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "link": 101, "subscrib": 101, "io": 101, "notifi": 101, "jong": 103, "shin": 103, "bug": [103, 106, 107, 108, 111, 112], "outsid": 103, "61": 103, "arbitrari": 103, "discontinu": 103, "dissimilar": 103, "64": 103, "67": 103, "70": 103, "patchobliquerandomforestregressor": 103, "suki": [103, 105, 112], "72": 103, "57": 103, "nearestneighborsmetaestim": 103, "83": 103, "thank": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "everyon": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "who": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "mainten": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "incept": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "involv": 104, "bottleneck": 104, "ryan": 104, "hausen": 104, "306": 104, "build_colemen_forest": 104, "317": 104, "bring": 104, "grf": 104, "286": 104, "analog": 105, "upgrad": 105, "reli": 105, "109": 105, "extraobliquedecisiontreeclassifi": 105, "2x": [105, 110], "114": 105, "101": 105, "streamdecisionforest": 105, "116": 105, "undergon": 106, "organiz": 106, "overhaul": 106, "featureimportanceforestclassifi": [106, 108, 109, 111], "featureimportanceforestregressor": 106, "135": 106, "140": 106, "129": 106, "featureimport": [106, 107], "yuxin": 106, "bai": 106, "143": 106, "156": 106, "158": 106, "issu": 107, "featureimportanceforest": 107, "permute_per_forest_fract": 107, "145": 107, "169": 107, "auc": 107, "164": 107, "conditional_resampl": 107, "170": 107, "152": 107, "apply_max_features_per_set": 107, "incorrect": 107, "oversampl": 107, "172": 107, "mainli": [108, 109], "183": [108, 109], "exhaust": [108, 109], "approximate_clf_mutual_inform": 109, "approximate_clf_mutual_information_with_monte_carlo": 109, "mont": 109, "carlo": 109, "199": 109, "206": 109, "210": 109, "light": 110, "211": 110, "track": 110, "203": 110, "build_permutation_forest": 110, "222": 110, "make_marron_wand_classif": 110, "227": 110, "overwrit": 110, "228": 110, "direct": 110, "degrad": 110, "242": 110, "bias": 111, "ensur": 111, "addition": 111, "codebas": 111, "previous": 111, "did": 111, "silent": 111, "ran": 111, "encod": 111, "infin": 111, "encount": 111, "264": 111, "hyppo": 111, "throw": 111, "279": 111, "274": 111, "remov": 111, "outdat": 111, "imbal": 111, "283": 111, "sktree": 112, "292": 112, "291": 112}, "objects": {"": [[0, 0, 0, "-", "treeple"]], "treeple": [[45, 1, 1, "", "ExtendedIsolationForest"], [46, 1, 1, "", "ExtraTreesClassifier"], [47, 1, 1, "", "ExtraTreesRegressor"], [48, 1, 1, "", "HonestForestClassifier"], [49, 1, 1, "", "MultiViewRandomForestClassifier"], [50, 1, 1, "", "NearestNeighborsMetaEstimator"], [51, 1, 1, "", "ObliqueRandomForestClassifier"], [52, 1, 1, "", "ObliqueRandomForestRegressor"], [53, 1, 1, "", "PatchObliqueRandomForestClassifier"], [54, 1, 1, "", "PatchObliqueRandomForestRegressor"], [55, 1, 1, "", "RandomForestClassifier"], [56, 1, 1, "", "RandomForestRegressor"], [57, 1, 1, "", "UnsupervisedObliqueRandomForest"], [58, 1, 1, "", "UnsupervisedRandomForest"]], "treeple.ExtendedIsolationForest": [[45, 2, 1, "", "decision_function"], [45, 3, 1, "", "estimators_samples_"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "fit_predict"], [45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "score_samples"], [45, 2, 1, "", "set_fit_request"], [45, 2, 1, "", "set_params"]], "treeple.ExtraTreesClassifier": [[46, 2, 1, "", "apply"], [46, 2, 1, "", "decision_path"], [46, 3, 1, "", "estimators_samples_"], [46, 3, 1, "", "feature_importances_"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "get_leaf_node_samples"], [46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "partial_fit"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_log_proba"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "predict_quantiles"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_fit_request"], [46, 2, 1, "", "set_params"], [46, 2, 1, "", "set_partial_fit_request"], [46, 2, 1, "", "set_score_request"]], "treeple.ExtraTreesRegressor": [[47, 2, 1, "", "apply"], [47, 2, 1, "", "decision_path"], [47, 3, 1, "", "estimators_samples_"], [47, 3, 1, "", "feature_importances_"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "get_leaf_node_samples"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_quantiles"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_fit_request"], [47, 2, 1, "", "set_params"], [47, 2, 1, "", "set_score_request"]], "treeple.HonestForestClassifier": [[48, 2, 1, "", "apply"], [48, 2, 1, "", "decision_path"], [48, 3, 1, "", "estimators_samples_"], [48, 3, 1, "", "feature_importances_"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "get_leaf_node_samples"], [48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 3, 1, "", "honest_indices_"], [48, 3, 1, "", "oob_samples_"], [48, 2, 1, "", "partial_fit"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_log_proba"], [48, 2, 1, "", "predict_proba"], [48, 2, 1, "", "predict_proba_per_tree"], [48, 2, 1, "", "predict_quantiles"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_fit_request"], [48, 2, 1, "", "set_params"], [48, 2, 1, "", "set_partial_fit_request"], [48, 2, 1, "", "set_score_request"], [48, 3, 1, "", "structure_indices_"]], "treeple.MultiViewRandomForestClassifier": [[49, 2, 1, "", "apply"], [49, 2, 1, "", "compute_similarity_matrix"], [49, 2, 1, "", "decision_path"], [49, 3, 1, "", "estimators_samples_"], [49, 3, 1, "", "feature_importances_"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "get_leaf_node_samples"], [49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 3, 1, "", "oob_samples_"], [49, 2, 1, "", "partial_fit"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_log_proba"], [49, 2, 1, "", "predict_proba"], [49, 2, 1, "", "predict_proba_per_tree"], [49, 2, 1, "", "predict_quantiles"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_fit_request"], [49, 2, 1, "", "set_params"], [49, 2, 1, "", "set_partial_fit_request"], [49, 2, 1, "", "set_score_request"]], "treeple.NearestNeighborsMetaEstimator": [[50, 2, 1, "", "fit"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "kneighbors"], [50, 2, 1, "", "radius_neighbors"], [50, 2, 1, "", "set_params"]], "treeple.ObliqueRandomForestClassifier": [[51, 2, 1, "", "apply"], [51, 2, 1, "", "compute_similarity_matrix"], [51, 2, 1, "", "decision_path"], [51, 3, 1, "", "estimators_samples_"], [51, 3, 1, "", "feature_importances_"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "get_leaf_node_samples"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 3, 1, "", "oob_samples_"], [51, 2, 1, "", "partial_fit"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_log_proba"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "predict_proba_per_tree"], [51, 2, 1, "", "predict_quantiles"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "set_partial_fit_request"], [51, 2, 1, "", "set_score_request"]], "treeple.ObliqueRandomForestRegressor": [[52, 2, 1, "", "apply"], [52, 2, 1, "", "compute_similarity_matrix"], [52, 2, 1, "", "decision_path"], [52, 3, 1, "", "estimators_samples_"], [52, 3, 1, "", "feature_importances_"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "get_leaf_node_samples"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 3, 1, "", "oob_samples_"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_quantiles"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "set_score_request"]], "treeple.PatchObliqueRandomForestClassifier": [[53, 2, 1, "", "apply"], [53, 2, 1, "", "compute_similarity_matrix"], [53, 2, 1, "", "decision_path"], [53, 3, 1, "", "estimators_samples_"], [53, 3, 1, "", "feature_importances_"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "get_leaf_node_samples"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 3, 1, "", "oob_samples_"], [53, 2, 1, "", "partial_fit"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_log_proba"], [53, 2, 1, "", "predict_proba"], [53, 2, 1, "", "predict_proba_per_tree"], [53, 2, 1, "", "predict_quantiles"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "set_partial_fit_request"], [53, 2, 1, "", "set_score_request"]], "treeple.PatchObliqueRandomForestRegressor": [[54, 2, 1, "", "apply"], [54, 2, 1, "", "compute_similarity_matrix"], [54, 2, 1, "", "decision_path"], [54, 3, 1, "", "estimators_samples_"], [54, 3, 1, "", "feature_importances_"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "get_leaf_node_samples"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 3, 1, "", "oob_samples_"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_quantiles"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_score_request"]], "treeple.RandomForestClassifier": [[55, 2, 1, "", "apply"], [55, 2, 1, "", "decision_path"], [55, 3, 1, "", "estimators_samples_"], [55, 3, 1, "", "feature_importances_"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "get_leaf_node_samples"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "partial_fit"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_log_proba"], [55, 2, 1, "", "predict_proba"], [55, 2, 1, "", "predict_quantiles"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_fit_request"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "set_partial_fit_request"], [55, 2, 1, "", "set_score_request"]], "treeple.RandomForestRegressor": [[56, 2, 1, "", "apply"], [56, 2, 1, "", "decision_path"], [56, 3, 1, "", "estimators_samples_"], [56, 3, 1, "", "feature_importances_"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "get_leaf_node_samples"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "predict_quantiles"], [56, 2, 1, "", "score"], [56, 2, 1, "", "set_fit_request"], [56, 2, 1, "", "set_params"], [56, 2, 1, "", "set_score_request"]], "treeple.UnsupervisedObliqueRandomForest": [[57, 2, 1, "", "apply"], [57, 2, 1, "", "compute_similarity_matrix"], [57, 2, 1, "", "decision_path"], [57, 3, 1, "", "estimators_samples_"], [57, 3, 1, "", "feature_importances_"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "fit_predict"], [57, 2, 1, "", "fit_transform"], [57, 2, 1, "", "get_leaf_node_samples"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "predict"], [57, 2, 1, "", "predict_quantiles"], [57, 2, 1, "", "set_fit_request"], [57, 2, 1, "", "set_output"], [57, 2, 1, "", "set_params"], [57, 2, 1, "", "transform"]], "treeple.UnsupervisedRandomForest": [[58, 2, 1, "", "apply"], [58, 2, 1, "", "compute_similarity_matrix"], [58, 2, 1, "", "decision_path"], [58, 3, 1, "", "estimators_samples_"], [58, 3, 1, "", "feature_importances_"], [58, 2, 1, "", "fit"], [58, 2, 1, "", "fit_predict"], [58, 2, 1, "", "fit_transform"], [58, 2, 1, "", "get_leaf_node_samples"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "predict_quantiles"], [58, 2, 1, "", "set_fit_request"], [58, 2, 1, "", "set_output"], [58, 2, 1, "", "set_params"], [58, 2, 1, "", "transform"]], "treeple._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "treeple.datasets": [[59, 4, 1, "", "approximate_clf_mutual_information"], [60, 4, 1, "", "approximate_clf_mutual_information_with_monte_carlo"], [61, 4, 1, "", "make_gaussian_mixture"], [62, 4, 1, "", "make_joint_factor_model"], [63, 4, 1, "", "make_marron_wand_classification"], [64, 4, 1, "", "make_quadratic_classification"], [65, 4, 1, "", "make_trunk_classification"], [66, 4, 1, "", "make_trunk_mixture_classification"]], "treeple.experimental": [[67, 4, 1, "", "conditional_resample"], [71, 4, 1, "", "mutual_info_ksg"]], "treeple.experimental.mutual_info": [[68, 4, 1, "", "cmi_gaussian"], [69, 4, 1, "", "entropy_gaussian"], [70, 4, 1, "", "mi_gaussian"]], "treeple.experimental.simulate": [[72, 4, 1, "", "simulate_helix"], [73, 4, 1, "", "simulate_multivariate_gaussian"], [74, 4, 1, "", "simulate_sphere"]], "treeple.stats": [[75, 1, 1, "", "PermutationHonestForestClassifier"], [76, 4, 1, "", "build_coleman_forest"], [77, 4, 1, "", "build_cv_forest"], [78, 4, 1, "", "build_oob_forest"], [79, 4, 1, "", "build_permutation_forest"]], "treeple.stats.PermutationHonestForestClassifier": [[75, 2, 1, "", "apply"], [75, 2, 1, "", "decision_path"], [75, 3, 1, "", "estimators_samples_"], [75, 3, 1, "", "feature_importances_"], [75, 2, 1, "", "fit"], [75, 2, 1, "", "get_leaf_node_samples"], [75, 2, 1, "", "get_metadata_routing"], [75, 2, 1, "", "get_params"], [75, 3, 1, "", "honest_indices_"], [75, 3, 1, "", "oob_samples_"], [75, 2, 1, "", "partial_fit"], [75, 2, 1, "", "predict"], [75, 2, 1, "", "predict_log_proba"], [75, 2, 1, "", "predict_proba"], [75, 2, 1, "", "predict_proba_per_tree"], [75, 2, 1, "", "predict_quantiles"], [75, 2, 1, "", "score"], [75, 2, 1, "", "set_fit_request"], [75, 2, 1, "", "set_params"], [75, 2, 1, "", "set_partial_fit_request"], [75, 2, 1, "", "set_score_request"], [75, 3, 1, "", "structure_indices_"]], "treeple.tree": [[80, 1, 1, "", "DecisionTreeClassifier"], [81, 1, 1, "", "DecisionTreeRegressor"], [82, 1, 1, "", "ExtraTreeClassifier"], [83, 1, 1, "", "ExtraTreeRegressor"], [84, 1, 1, "", "HonestTreeClassifier"], [85, 1, 1, "", "MultiViewDecisionTreeClassifier"], [86, 1, 1, "", "ObliqueDecisionTreeClassifier"], [87, 1, 1, "", "ObliqueDecisionTreeRegressor"], [88, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [89, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [90, 1, 1, "", "UnsupervisedDecisionTree"], [91, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [92, 4, 1, "", "compute_forest_similarity_matrix"]], "treeple.tree.DecisionTreeClassifier": [[80, 2, 1, "", "apply"], [80, 2, 1, "", "cost_complexity_pruning_path"], [80, 2, 1, "", "decision_path"], [80, 3, 1, "", "feature_importances_"], [80, 2, 1, "", "fit"], [80, 2, 1, "", "get_depth"], [80, 2, 1, "", "get_leaf_node_samples"], [80, 2, 1, "", "get_metadata_routing"], [80, 2, 1, "", "get_n_leaves"], [80, 2, 1, "", "get_params"], [80, 2, 1, "", "partial_fit"], [80, 2, 1, "", "predict"], [80, 2, 1, "", "predict_log_proba"], [80, 2, 1, "", "predict_proba"], [80, 2, 1, "", "predict_quantiles"], [80, 2, 1, "", "score"], [80, 2, 1, "", "set_fit_request"], [80, 2, 1, "", "set_params"], [80, 2, 1, "", "set_partial_fit_request"], [80, 2, 1, "", "set_predict_proba_request"], [80, 2, 1, "", "set_predict_request"], [80, 2, 1, "", "set_score_request"]], "treeple.tree.DecisionTreeRegressor": [[81, 2, 1, "", "apply"], [81, 2, 1, "", "cost_complexity_pruning_path"], [81, 2, 1, "", "decision_path"], [81, 3, 1, "", "feature_importances_"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "get_depth"], [81, 2, 1, "", "get_leaf_node_samples"], [81, 2, 1, "", "get_metadata_routing"], [81, 2, 1, "", "get_n_leaves"], [81, 2, 1, "", "get_params"], [81, 2, 1, "", "predict"], [81, 2, 1, "", "predict_quantiles"], [81, 2, 1, "", "score"], [81, 2, 1, "", "set_fit_request"], [81, 2, 1, "", "set_params"], [81, 2, 1, "", "set_predict_request"], [81, 2, 1, "", "set_score_request"]], "treeple.tree.ExtraTreeClassifier": [[82, 2, 1, "", "apply"], [82, 2, 1, "", "cost_complexity_pruning_path"], [82, 2, 1, "", "decision_path"], [82, 3, 1, "", "feature_importances_"], [82, 2, 1, "", "fit"], [82, 2, 1, "", "get_depth"], [82, 2, 1, "", "get_leaf_node_samples"], [82, 2, 1, "", "get_metadata_routing"], [82, 2, 1, "", "get_n_leaves"], [82, 2, 1, "", "get_params"], [82, 2, 1, "", "partial_fit"], [82, 2, 1, "", "predict"], [82, 2, 1, "", "predict_log_proba"], [82, 2, 1, "", "predict_proba"], [82, 2, 1, "", "predict_quantiles"], [82, 2, 1, "", "score"], [82, 2, 1, "", "set_fit_request"], [82, 2, 1, "", "set_params"], [82, 2, 1, "", "set_partial_fit_request"], [82, 2, 1, "", "set_predict_proba_request"], [82, 2, 1, "", "set_predict_request"], [82, 2, 1, "", "set_score_request"]], "treeple.tree.ExtraTreeRegressor": [[83, 2, 1, "", "apply"], [83, 2, 1, "", "cost_complexity_pruning_path"], [83, 2, 1, "", "decision_path"], [83, 3, 1, "", "feature_importances_"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "get_depth"], [83, 2, 1, "", "get_leaf_node_samples"], [83, 2, 1, "", "get_metadata_routing"], [83, 2, 1, "", "get_n_leaves"], [83, 2, 1, "", "get_params"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_quantiles"], [83, 2, 1, "", "score"], [83, 2, 1, "", "set_fit_request"], [83, 2, 1, "", "set_params"], [83, 2, 1, "", "set_predict_request"], [83, 2, 1, "", "set_score_request"]], "treeple.tree.HonestTreeClassifier": [[84, 2, 1, "", "apply"], [84, 2, 1, "", "cost_complexity_pruning_path"], [84, 2, 1, "", "decision_path"], [84, 3, 1, "", "feature_importances_"], [84, 2, 1, "", "fit"], [84, 2, 1, "", "get_depth"], [84, 2, 1, "", "get_leaf_node_samples"], [84, 2, 1, "", "get_metadata_routing"], [84, 2, 1, "", "get_n_leaves"], [84, 2, 1, "", "get_params"], [84, 2, 1, "", "partial_fit"], [84, 2, 1, "", "predict"], [84, 2, 1, "", "predict_proba"], [84, 2, 1, "", "predict_quantiles"], [84, 2, 1, "", "score"], [84, 2, 1, "", "set_fit_request"], [84, 2, 1, "", "set_params"], [84, 2, 1, "", "set_partial_fit_request"], [84, 2, 1, "", "set_predict_proba_request"], [84, 2, 1, "", "set_predict_request"], [84, 2, 1, "", "set_score_request"]], "treeple.tree.MultiViewDecisionTreeClassifier": [[85, 2, 1, "", "apply"], [85, 2, 1, "", "compute_similarity_matrix"], [85, 2, 1, "", "cost_complexity_pruning_path"], [85, 2, 1, "", "decision_path"], [85, 3, 1, "", "feature_importances_"], [85, 2, 1, "", "fit"], [85, 2, 1, "", "get_depth"], [85, 2, 1, "", "get_leaf_node_samples"], [85, 2, 1, "", "get_metadata_routing"], [85, 2, 1, "", "get_n_leaves"], [85, 2, 1, "", "get_params"], [85, 2, 1, "", "partial_fit"], [85, 2, 1, "", "predict"], [85, 2, 1, "", "predict_log_proba"], [85, 2, 1, "", "predict_proba"], [85, 2, 1, "", "predict_quantiles"], [85, 2, 1, "", "score"], [85, 2, 1, "", "set_fit_request"], [85, 2, 1, "", "set_params"], [85, 2, 1, "", "set_partial_fit_request"], [85, 2, 1, "", "set_predict_proba_request"], [85, 2, 1, "", "set_predict_request"], [85, 2, 1, "", "set_score_request"]], "treeple.tree.ObliqueDecisionTreeClassifier": [[86, 2, 1, "", "apply"], [86, 2, 1, "", "compute_similarity_matrix"], [86, 2, 1, "", "cost_complexity_pruning_path"], [86, 2, 1, "", "decision_path"], [86, 3, 1, "", "feature_importances_"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "get_depth"], [86, 2, 1, "", "get_leaf_node_samples"], [86, 2, 1, "", "get_metadata_routing"], [86, 2, 1, "", "get_n_leaves"], [86, 2, 1, "", "get_params"], [86, 2, 1, "", "partial_fit"], [86, 2, 1, "", "predict"], [86, 2, 1, "", "predict_log_proba"], [86, 2, 1, "", "predict_proba"], [86, 2, 1, "", "predict_quantiles"], [86, 2, 1, "", "score"], [86, 2, 1, "", "set_fit_request"], [86, 2, 1, "", "set_params"], [86, 2, 1, "", "set_partial_fit_request"], [86, 2, 1, "", "set_predict_proba_request"], [86, 2, 1, "", "set_predict_request"], [86, 2, 1, "", "set_score_request"]], "treeple.tree.ObliqueDecisionTreeRegressor": [[87, 2, 1, "", "apply"], [87, 2, 1, "", "compute_similarity_matrix"], [87, 2, 1, "", "cost_complexity_pruning_path"], [87, 2, 1, "", "decision_path"], [87, 3, 1, "", "feature_importances_"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "get_depth"], [87, 2, 1, "", "get_leaf_node_samples"], [87, 2, 1, "", "get_metadata_routing"], [87, 2, 1, "", "get_n_leaves"], [87, 2, 1, "", "get_params"], [87, 2, 1, "", "predict"], [87, 2, 1, "", "predict_quantiles"], [87, 2, 1, "", "score"], [87, 2, 1, "", "set_fit_request"], [87, 2, 1, "", "set_params"], [87, 2, 1, "", "set_predict_request"], [87, 2, 1, "", "set_score_request"]], "treeple.tree.PatchObliqueDecisionTreeClassifier": [[88, 2, 1, "", "apply"], [88, 2, 1, "", "compute_similarity_matrix"], [88, 2, 1, "", "cost_complexity_pruning_path"], [88, 2, 1, "", "decision_path"], [88, 3, 1, "", "feature_importances_"], [88, 2, 1, "", "fit"], [88, 2, 1, "", "get_depth"], [88, 2, 1, "", "get_leaf_node_samples"], [88, 2, 1, "", "get_metadata_routing"], [88, 2, 1, "", "get_n_leaves"], [88, 2, 1, "", "get_params"], [88, 2, 1, "", "partial_fit"], [88, 2, 1, "", "predict"], [88, 2, 1, "", "predict_log_proba"], [88, 2, 1, "", "predict_proba"], [88, 2, 1, "", "predict_quantiles"], [88, 2, 1, "", "score"], [88, 2, 1, "", "set_fit_request"], [88, 2, 1, "", "set_params"], [88, 2, 1, "", "set_partial_fit_request"], [88, 2, 1, "", "set_predict_proba_request"], [88, 2, 1, "", "set_predict_request"], [88, 2, 1, "", "set_score_request"]], "treeple.tree.PatchObliqueDecisionTreeRegressor": [[89, 2, 1, "", "apply"], [89, 2, 1, "", "compute_similarity_matrix"], [89, 2, 1, "", "cost_complexity_pruning_path"], [89, 2, 1, "", "decision_path"], [89, 3, 1, "", "feature_importances_"], [89, 2, 1, "", "fit"], [89, 2, 1, "", "get_depth"], [89, 2, 1, "", "get_leaf_node_samples"], [89, 2, 1, "", "get_metadata_routing"], [89, 2, 1, "", "get_n_leaves"], [89, 2, 1, "", "get_params"], [89, 2, 1, "", "predict"], [89, 2, 1, "", "predict_quantiles"], [89, 2, 1, "", "score"], [89, 2, 1, "", "set_fit_request"], [89, 2, 1, "", "set_params"], [89, 2, 1, "", "set_predict_request"], [89, 2, 1, "", "set_score_request"]], "treeple.tree.UnsupervisedDecisionTree": [[90, 2, 1, "", "apply"], [90, 2, 1, "", "compute_similarity_matrix"], [90, 2, 1, "", "cost_complexity_pruning_path"], [90, 2, 1, "", "decision_path"], [90, 3, 1, "", "feature_importances_"], [90, 2, 1, "", "fit_predict"], [90, 2, 1, "", "fit_transform"], [90, 2, 1, "", "get_depth"], [90, 2, 1, "", "get_leaf_node_samples"], [90, 2, 1, "", "get_metadata_routing"], [90, 2, 1, "", "get_n_leaves"], [90, 2, 1, "", "get_params"], [90, 2, 1, "", "predict"], [90, 2, 1, "", "predict_quantiles"], [90, 2, 1, "", "set_fit_request"], [90, 2, 1, "", "set_output"], [90, 2, 1, "", "set_params"], [90, 2, 1, "", "set_predict_request"], [90, 2, 1, "", "transform"]], "treeple.tree.UnsupervisedObliqueDecisionTree": [[91, 2, 1, "", "apply"], [91, 2, 1, "", "compute_similarity_matrix"], [91, 2, 1, "", "cost_complexity_pruning_path"], [91, 2, 1, "", "decision_path"], [91, 3, 1, "", "feature_importances_"], [91, 2, 1, "", "fit_predict"], [91, 2, 1, "", "fit_transform"], [91, 2, 1, "", "get_depth"], [91, 2, 1, "", "get_leaf_node_samples"], [91, 2, 1, "", "get_metadata_routing"], [91, 2, 1, "", "get_n_leaves"], [91, 2, 1, "", "get_params"], [91, 2, 1, "", "predict"], [91, 2, 1, "", "predict_quantiles"], [91, 2, 1, "", "set_fit_request"], [91, 2, 1, "", "set_output"], [91, 2, 1, "", "set_params"], [91, 2, 1, "", "set_predict_request"], [91, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "scikit": 0, "learn": [0, 5, 6, 99], "tree": [0, 1, 2, 5, 6, 10, 19, 20, 22, 26, 29, 30, 31, 32, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 99], "estim": [0, 36], "supervis": [0, 96], "unsupervis": [0, 97], "outlier": [0, 5, 9, 99], "detect": [0, 5, 9, 99], "distanc": [0, 40], "metric": 0, "statist": [0, 36, 37, 38, 39, 40, 42, 43], "hypothesi": [0, 5, 34, 99], "test": [0, 5, 34, 41, 44, 99], "dataset": [0, 7, 20, 23, 24, 27, 59, 60, 61, 62, 63, 64, 65, 66], "experiment": [0, 67, 68, 69, 70, 71, 72, 73, 74], "function": [0, 14], "calibr": [1, 3, 5, 99], "decis": [1, 2, 5, 6, 10, 19, 20, 22, 26, 29, 96, 97, 99], "via": [1, 5, 99], "honesti": [1, 5, 99], "comparison": 2, "honest": [2, 3, 96], "discuss": [2, 23, 24, 30, 32], "evalu": [2, 95, 97], "predict": [2, 5, 10, 12, 13, 14, 15, 16, 23, 25, 27, 99], "plot": [3, 10, 14, 15, 16, 20, 25, 27, 31, 32], "forest": [3, 5, 7, 10, 12, 14, 15, 16, 23, 24, 25, 27, 95, 99], "overlap": 3, "gaussian": [3, 36, 37, 38, 39, 40, 41, 42, 43, 44], "simul": [3, 7, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 72, 73, 74], "refer": [3, 10, 23, 24, 93, 95, 96, 97], "comput": [4, 8, 11, 17, 18, 21, 28, 33, 35, 98], "time": [4, 8, 11, 17, 18, 21, 28, 31, 33, 35, 98], "exampl": [5, 10, 65, 66, 76, 78, 95, 99], "multi": [5, 6, 7, 30, 96, 99], "view": [5, 6, 7, 30, 99], "quantil": [5, 12, 13, 14, 15, 16, 99], "random": [5, 7, 12, 14, 15, 23, 24, 25, 27, 95, 99], "compar": [5, 7, 19, 23, 26, 96, 99], "sklearn": [5, 19, 99], "treepl": [5, 19, 34, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99], "spars": [5, 22, 25, 32, 99], "obliqu": [5, 16, 22, 23, 24, 25, 26, 27, 31, 32, 95, 96, 99], "project": [5, 22, 30, 31, 32, 99], "splitter": [5, 29, 30, 31, 32, 99], "analyz": 7, "data": [7, 10, 13, 16, 42, 44], "fit": [7, 15, 37, 38, 39, 40, 41, 42, 43, 44], "visual": [7, 10, 30], "score": 7, "perform": 7, "extendedisolationforest": [10, 45], "gener": [10, 13, 16, 31, 32, 36], "train": [10, 15, 20], "model": [10, 15, 37, 38, 39, 40, 41, 42, 43, 44], "discret": 10, "boundari": 10, "path": 10, "length": 10, "each": [10, 30], "within": 10, "differ": [13, 24, 96], "interpol": 13, "method": 13, "The": 13, "interv": 14, "regressor": [14, 15], "result": [14, 15, 16], "class": 15, "sampl": [15, 30, 31], "regress": [16, 96], "surfac": [20, 26], "iri": 20, "extra": [23, 24, 26], "cc18": [23, 27], "speed": 24, "v": 24, "size": 24, "axi": [25, 27, 30], "align": [25, 27, 30], "pariti": 25, "standard": 26, "demonstr": 30, "matrix": [30, 32], "an": [30, 31, 32], "initi": [30, 31, 32], "split": 30, "candid": 30, "scale": 30, "featur": [30, 95], "set": 30, "dimension": [30, 42], "matric": [31, 32], "imag": 31, "seri": 31, "patch": [31, 32], "1d": 31, "2d": 31, "3d": 31, "discontigu": 31, "true": 36, "posterior": 36, "mixtur": 36, "calcul": [36, 37, 38, 39, 40, 41, 42, 43, 44], "x": [36, 42, 43], "prior": 36, "pdf": 36, "": [36, 37, 42], "98": [36, 37, 42], "mi": [36, 38, 41], "pauc": [36, 39], "90": 36, "creat": [37, 38, 39, 40, 41, 42, 43, 44], "two": [37, 38, 39, 40, 41, 42, 43, 44, 97], "r": 39, "helling": 40, "p": [41, 44], "valu": [41, 44], "might": 41, "independ": [41, 44], "multiview": [42, 44], "z": [42, 43], "cmi": [43, 44], "onli": 43, "comight": 44, "modifi": 44, "permut": 44, "variabl": 44, "extratreesclassifi": 46, "extratreesregressor": 47, "honestforestclassifi": 48, "multiviewrandomforestclassifi": 49, "nearestneighborsmetaestim": 50, "obliquerandomforestclassifi": 51, "obliquerandomforestregressor": 52, "patchobliquerandomforestclassifi": 53, "patchobliquerandomforestregressor": 54, "randomforestclassifi": 55, "randomforestregressor": 56, "unsupervisedobliquerandomforest": 57, "unsupervisedrandomforest": 58, "approximate_clf_mutual_inform": 59, "approximate_clf_mutual_information_with_monte_carlo": 60, "make_gaussian_mixtur": 61, "make_joint_factor_model": 62, "make_marron_wand_classif": 63, "make_quadratic_classif": 64, "make_trunk_classif": 65, "us": [65, 66, 76, 78, 96, 99], "make_trunk_mixture_classif": 66, "conditional_resampl": 67, "mutual_info": [68, 69, 70], "cmi_gaussian": 68, "entropy_gaussian": 69, "mi_gaussian": 70, "mutual_info_ksg": 71, "simulate_helix": 72, "simulate_multivariate_gaussian": 73, "simulate_spher": 74, "stat": [75, 76, 77, 78, 79], "permutationhonestforestclassifi": 75, "build_coleman_forest": 76, "build_cv_forest": 77, "build_oob_forest": 78, "build_permutation_forest": 79, "decisiontreeclassifi": 80, "decisiontreeregressor": 81, "extratreeclassifi": 82, "extratreeregressor": 83, "honesttreeclassifi": 84, "multiviewdecisiontreeclassifi": 85, "obliquedecisiontreeclassifi": 86, "obliquedecisiontreeregressor": 87, "patchobliquedecisiontreeclassifi": 88, "patchobliquedecisiontreeregressor": 89, "unsuperviseddecisiontre": 90, "unsupervisedobliquedecisiontre": 91, "compute_forest_similarity_matrix": 92, "content": 93, "get": 93, "start": 93, "indic": 93, "tabl": 93, "instal": 94, "depend": 94, "pip": 94, "from": 94, "sourc": 94, "meson": 94, "conda": 94, "recommend": 94, "import": 95, "mathemat": 96, "formul": 96, "classif": 96, "output": 96, "problem": 96, "complex": 96, "tip": 96, "practic": 96, "limit": 96, "criterion": 97, "mean": 97, "fast": 97, "bic": 97, "user": 100, "guid": 100, "releas": 101, "histori": 101, "version": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "0": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "1": 103, "changelog": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "code": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "contributor": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "10": 104, "2": 105, "3": 106, "4": 107, "5": 108, "6": 109, "7": 110, "8": 111, "9": 112}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Outlier Detection": [[0, "outlier-detection"]], "Distance Metrics": [[0, "distance-metrics"]], "Statistical Hypothesis Testing": [[0, "statistical-hypothesis-testing"]], "Datasets": [[0, "datasets"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Calibrated decision trees via honesty": [[1, "calibrated-decision-trees-via-honesty"], [5, "calibrated-decision-trees-via-honesty"], [99, "calibrated-decision-trees-via-honesty"]], "Comparison of Decision Tree and Honest Tree": [[2, "comparison-of-decision-tree-and-honest-tree"]], "Discussion": [[2, "discussion"], [23, "discussion"], [24, "discussion"], [30, "discussion"], [32, "discussion"]], "Evaluate predictions of the trees": [[2, "evaluate-predictions-of-the-trees"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[3, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[3, "references"], [10, "references"], [23, "references"], [24, "references"], [93, null], [95, null], [95, null], [97, null]], "Computation times": [[4, "computation-times"], [8, "computation-times"], [11, "computation-times"], [17, "computation-times"], [18, "computation-times"], [21, "computation-times"], [28, "computation-times"], [33, "computation-times"], [35, "computation-times"], [98, "computation-times"]], "Examples": [[5, "examples"], [99, "examples"]], "Multi-view learning with Decision-trees": [[5, "multi-view-learning-with-decision-trees"], [6, "multi-view-learning-with-decision-trees"], [99, "multi-view-learning-with-decision-trees"]], "Outlier-detection": [[5, "outlier-detection"], [9, "outlier-detection"], [99, "outlier-detection"]], "Quantile Predictions with Random Forest": [[5, "quantile-predictions-with-random-forest"], [12, "quantile-predictions-with-random-forest"], [99, "quantile-predictions-with-random-forest"]], "Comparing sklearn and treeple decision trees": [[5, "comparing-sklearn-and-treeple-decision-trees"], [19, "comparing-sklearn-and-treeple-decision-trees"], [99, "comparing-sklearn-and-treeple-decision-trees"]], "Sparse oblique projections with oblique decision-trees": [[5, "sparse-oblique-projections-with-oblique-decision-trees"], [22, "sparse-oblique-projections-with-oblique-decision-trees"], [99, "sparse-oblique-projections-with-oblique-decision-trees"]], "Decision-tree splitters": [[5, "decision-tree-splitters"], [29, "decision-tree-splitters"], [99, "decision-tree-splitters"]], "Treeple for Hypothesis Testing": [[5, "treeple-for-hypothesis-testing"], [34, "treeple-for-hypothesis-testing"], [99, "treeple-for-hypothesis-testing"]], "Analyze a multi-view dataset with a multi-view random forest": [[7, "analyze-a-multi-view-dataset-with-a-multi-view-random-forest"]], "Simulate data": [[7, "simulate-data"]], "Fit Random Forest and Multi-view Random Forest": [[7, "fit-random-forest-and-multi-view-random-forest"]], "Visualize scores and compare performance": [[7, "visualize-scores-and-compare-performance"]], "ExtendedIsolationForest example": [[10, "extendedisolationforest-example"]], "Data generation": [[10, "data-generation"]], "Training of the model": [[10, "training-of-the-model"]], "Plot discrete decision boundary": [[10, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[10, "plot-path-length-decision-boundary"]], "Visualize the prediction of each tree within the forest": [[10, "visualize-the-prediction-of-each-tree-within-the-forest"]], "Predicting with different quantile interpolation methods": [[13, "predicting-with-different-quantile-interpolation-methods"]], "Generate the data": [[13, "generate-the-data"], [16, "generate-the-data"]], "The interpolation methods": [[13, "the-interpolation-methods"]], "Quantile prediction intervals with Random Forest Regressor": [[14, "quantile-prediction-intervals-with-random-forest-regressor"]], "Quantile Prediction Function": [[14, "quantile-prediction-function"]], "Plot the results": [[14, "plot-the-results"], [15, "plot-the-results"], [16, "plot-the-results"]], "Quantile prediction with Random Forest Regressor class": [[15, "quantile-prediction-with-random-forest-regressor-class"]], "Fit the model to the training samples": [[15, "fit-the-model-to-the-training-samples"]], "Quantile regression with oblique regression forest": [[16, "quantile-regression-with-oblique-regression-forest"]], "Generate Quantile Predictions": [[16, "generate-quantile-predictions"]], "Plot the decision surface of decision trees trained on the iris dataset": [[20, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[23, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[24, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[25, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[26, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[27, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree": [[30, "demonstrate-and-visualize-a-multi-view-projection-matrix-for-an-axis-aligned-tree"]], "Initialize the multi-view splitter": [[30, "initialize-the-multi-view-splitter"]], "Sample the projection matrix": [[30, "sample-the-projection-matrix"]], "Sampling split candidates scaled to each feature-set dimensionality": [[30, "sampling-split-candidates-scaled-to-each-feature-set-dimensionality"]], "Plot the projection matrices of an oblique tree for sampling images, or time-series": [[31, "plot-the-projection-matrices-of-an-oblique-tree-for-sampling-images-or-time-series"]], "Initialize patch splitter": [[31, "initialize-patch-splitter"], [32, "initialize-patch-splitter"]], "Generate 1D patches": [[31, "generate-1d-patches"]], "Generate 2D patches": [[31, "generate-2d-patches"]], "Generate 3D patches": [[31, "generate-3d-patches"]], "Discontiguous Patches": [[31, "discontiguous-patches"]], "Plot the sparse projection matrices of an oblique tree": [[32, "plot-the-sparse-projection-matrices-of-an-oblique-tree"]], "Initialize the splitter": [[32, "initialize-the-splitter"]], "Generate projection matrix": [[32, "generate-projection-matrix"]], "Estimating true posteriors & statistics": [[36, "estimating-true-posteriors-statistics"]], "True posterior estimation": [[36, "true-posterior-estimation"]], "Generate gaussian mixture simulations": [[36, "generate-gaussian-mixture-simulations"]], "Calculate X priors with true pdfs": [[36, "calculate-x-priors-with-true-pdfs"]], "Calculate true posteriors": [[36, "calculate-true-posteriors"]], "Generate true statistic estimates: S@98": [[36, "generate-true-statistic-estimates-s-98"]], "Generate true statistic estimates: MI": [[36, "generate-true-statistic-estimates-mi"]], "Generate true statistic estimates: pAUC@90": [[36, "generate-true-statistic-estimates-pauc-90"]], "Calculating S@98": [[37, "calculating-s-98"]], "S@98": [[37, "s-98"]], "Create a simulation with two gaussians": [[37, "create-a-simulation-with-two-gaussians"], [38, "create-a-simulation-with-two-gaussians"], [39, "create-a-simulation-with-two-gaussians"], [40, "create-a-simulation-with-two-gaussians"], [41, "create-a-simulation-with-two-gaussians"], [43, "create-a-simulation-with-two-gaussians"], [44, "create-a-simulation-with-two-gaussians"]], "Fit the model": [[37, "fit-the-model"], [38, "fit-the-model"], [39, "fit-the-model"], [40, "fit-the-model"]], "Calculate the statistic": [[37, "calculate-the-statistic"], [38, "calculate-the-statistic"], [39, "calculate-the-statistic"], [40, "calculate-the-statistic"], [42, "calculate-the-statistic"], [43, "calculate-the-statistic"]], "Calculating MI": [[38, "calculating-mi"]], "MI": [[38, "mi"], [41, "mi"]], "Calculating pAUC": [[39, "calculating-pauc"]], "pAUC@r": [[39, "pauc-r"]], "Calculating Hellinger Distance": [[40, "calculating-hellinger-distance"]], "Hellinger Distance": [[40, "hellinger-distance"]], "Calculating p-value (MIGHT)": [[41, "calculating-p-value-might"]], "Independence Testing": [[41, "independence-testing"], [44, "independence-testing"]], "Fit the models and calculate the p-value": [[41, "fit-the-models-and-calculate-the-p-value"], [44, "fit-the-models-and-calculate-the-p-value"]], "Calculating S@98 with multiview data": [[42, "calculating-s-98-with-multiview-data"]], "S@98 with multiview data": [[42, "s-98-with-multiview-data"]], "Create a two-dimensional simulation with gaussians": [[42, "create-a-two-dimensional-simulation-with-gaussians"]], "Fit the model with X and Z": [[42, "fit-the-model-with-x-and-z"], [43, "fit-the-model-with-x-and-z"]], "Calculating CMI": [[43, "calculating-cmi"]], "CMI": [[43, "cmi"], [44, "cmi"]], "Fit the model with Z only": [[43, "fit-the-model-with-z-only"]], "Calculating p-value with multiview data (CoMIGHT)": [[44, "calculating-p-value-with-multiview-data-comight"]], "Modify the simulation with permuted variable two": [[44, "modify-the-simulation-with-permuted-variable-two"]], "treeple.ExtendedIsolationForest": [[45, "treeple-extendedisolationforest"]], "treeple.ExtraTreesClassifier": [[46, "treeple-extratreesclassifier"]], "treeple.ExtraTreesRegressor": [[47, "treeple-extratreesregressor"]], "treeple.HonestForestClassifier": [[48, "treeple-honestforestclassifier"]], "treeple.MultiViewRandomForestClassifier": [[49, "treeple-multiviewrandomforestclassifier"]], "treeple.NearestNeighborsMetaEstimator": [[50, "treeple-nearestneighborsmetaestimator"]], "treeple.ObliqueRandomForestClassifier": [[51, "treeple-obliquerandomforestclassifier"]], "treeple.ObliqueRandomForestRegressor": [[52, "treeple-obliquerandomforestregressor"]], "treeple.PatchObliqueRandomForestClassifier": [[53, "treeple-patchobliquerandomforestclassifier"]], "treeple.PatchObliqueRandomForestRegressor": [[54, "treeple-patchobliquerandomforestregressor"]], "treeple.RandomForestClassifier": [[55, "treeple-randomforestclassifier"]], "treeple.RandomForestRegressor": [[56, "treeple-randomforestregressor"]], "treeple.UnsupervisedObliqueRandomForest": [[57, "treeple-unsupervisedobliquerandomforest"]], "treeple.UnsupervisedRandomForest": [[58, "treeple-unsupervisedrandomforest"]], "treeple.datasets.approximate_clf_mutual_information": [[59, "treeple-datasets-approximate-clf-mutual-information"]], "treeple.datasets.approximate_clf_mutual_information_with_monte_carlo": [[60, "treeple-datasets-approximate-clf-mutual-information-with-monte-carlo"]], "treeple.datasets.make_gaussian_mixture": [[61, "treeple-datasets-make-gaussian-mixture"]], "treeple.datasets.make_joint_factor_model": [[62, "treeple-datasets-make-joint-factor-model"]], "treeple.datasets.make_marron_wand_classification": [[63, "treeple-datasets-make-marron-wand-classification"]], "treeple.datasets.make_quadratic_classification": [[64, "treeple-datasets-make-quadratic-classification"]], "treeple.datasets.make_trunk_classification": [[65, "treeple-datasets-make-trunk-classification"]], "Examples using treeple.datasets.make_trunk_classification": [[65, "examples-using-treeple-datasets-make-trunk-classification"]], "treeple.datasets.make_trunk_mixture_classification": [[66, "treeple-datasets-make-trunk-mixture-classification"]], "Examples using treeple.datasets.make_trunk_mixture_classification": [[66, "examples-using-treeple-datasets-make-trunk-mixture-classification"]], "treeple.experimental.conditional_resample": [[67, "treeple-experimental-conditional-resample"]], "treeple.experimental.mutual_info.cmi_gaussian": [[68, "treeple-experimental-mutual-info-cmi-gaussian"]], "treeple.experimental.mutual_info.entropy_gaussian": [[69, "treeple-experimental-mutual-info-entropy-gaussian"]], "treeple.experimental.mutual_info.mi_gaussian": [[70, "treeple-experimental-mutual-info-mi-gaussian"]], "treeple.experimental.mutual_info_ksg": [[71, "treeple-experimental-mutual-info-ksg"]], "treeple.experimental.simulate.simulate_helix": [[72, "treeple-experimental-simulate-simulate-helix"]], "treeple.experimental.simulate.simulate_multivariate_gaussian": [[73, "treeple-experimental-simulate-simulate-multivariate-gaussian"]], "treeple.experimental.simulate.simulate_sphere": [[74, "treeple-experimental-simulate-simulate-sphere"]], "treeple.stats.PermutationHonestForestClassifier": [[75, "treeple-stats-permutationhonestforestclassifier"]], "treeple.stats.build_coleman_forest": [[76, "treeple-stats-build-coleman-forest"]], "Examples using treeple.stats.build_coleman_forest": [[76, "examples-using-treeple-stats-build-coleman-forest"]], "treeple.stats.build_cv_forest": [[77, "treeple-stats-build-cv-forest"]], "treeple.stats.build_oob_forest": [[78, "treeple-stats-build-oob-forest"]], "Examples using treeple.stats.build_oob_forest": [[78, "examples-using-treeple-stats-build-oob-forest"]], "treeple.stats.build_permutation_forest": [[79, "treeple-stats-build-permutation-forest"]], "treeple.tree.DecisionTreeClassifier": [[80, "treeple-tree-decisiontreeclassifier"]], "treeple.tree.DecisionTreeRegressor": [[81, "treeple-tree-decisiontreeregressor"]], "treeple.tree.ExtraTreeClassifier": [[82, "treeple-tree-extratreeclassifier"]], "treeple.tree.ExtraTreeRegressor": [[83, "treeple-tree-extratreeregressor"]], "treeple.tree.HonestTreeClassifier": [[84, "treeple-tree-honesttreeclassifier"]], "treeple.tree.MultiViewDecisionTreeClassifier": [[85, "treeple-tree-multiviewdecisiontreeclassifier"]], "treeple.tree.ObliqueDecisionTreeClassifier": [[86, "treeple-tree-obliquedecisiontreeclassifier"]], "treeple.tree.ObliqueDecisionTreeRegressor": [[87, "treeple-tree-obliquedecisiontreeregressor"]], "treeple.tree.PatchObliqueDecisionTreeClassifier": [[88, "treeple-tree-patchobliquedecisiontreeclassifier"]], "treeple.tree.PatchObliqueDecisionTreeRegressor": [[89, "treeple-tree-patchobliquedecisiontreeregressor"]], "treeple.tree.UnsupervisedDecisionTree": [[90, "treeple-tree-unsuperviseddecisiontree"]], "treeple.tree.UnsupervisedObliqueDecisionTree": [[91, "treeple-tree-unsupervisedobliquedecisiontree"]], "treeple.tree.compute_forest_similarity_matrix": [[92, "treeple-tree-compute-forest-similarity-matrix"]], "treeple": [[93, "treeple"]], "Contents": [[93, "contents"]], "Getting started:": [[93, null]], "Indices and tables": [[93, "indices-and-tables"]], "Installation": [[94, "installation"]], "Dependencies": [[94, "dependencies"]], "Installing with pip": [[94, "installing-with-pip"]], "Installing from source with Meson": [[94, "installing-from-source-with-meson"]], "Conda (Recommended)": [[94, "conda-recommended"]], "Oblique Random Forests": [[95, "oblique-random-forests"]], "Examples:": [[95, null]], "Feature importance evaluation": [[95, "feature-importance-evaluation"]], "Supervised Decision Trees": [[96, "supervised-decision-trees"]], "Oblique Trees": [[96, "oblique-trees"]], "Differences compared to decision trees": [[96, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[96, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[96, "classification-regression-and-multi-output-problems"]], "Complexity": [[96, "complexity"]], "Tips on practical use": [[96, "tips-on-practical-use"]], "Limitations compared to decision trees": [[96, "limitations-compared-to-decision-trees"]], "References:": [[96, null]], "Honest Trees": [[96, "honest-trees"]], "Unsupervised Decision Trees": [[97, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[97, "unsupervised-criterion"]], "Two-Means": [[97, "two-means"]], "Fast-BIC": [[97, "fast-bic"]], "Evaluating Unsupervised Trees": [[97, "evaluating-unsupervised-trees"]], "Examples using treeple": [[99, "examples-using-treeple"]], "User Guide": [[100, "user-guide"]], "Release History": [[101, "release-history"]], "Version 0.1": [[103, "version-0-1"]], "Changelog": [[103, "changelog"], [104, "changelog"], [105, "changelog"], [106, "changelog"], [107, "changelog"], [108, "changelog"], [109, "changelog"], [110, "changelog"], [111, "changelog"], [112, "changelog"]], "Code and Documentation Contributors": [[103, "code-and-documentation-contributors"], [104, "code-and-documentation-contributors"], [105, "code-and-documentation-contributors"], [106, "code-and-documentation-contributors"], [107, "code-and-documentation-contributors"], [108, "code-and-documentation-contributors"], [109, "code-and-documentation-contributors"], [110, "code-and-documentation-contributors"], [111, "code-and-documentation-contributors"], [112, "code-and-documentation-contributors"]], "Version 0.10": [[104, "version-0-10"]], "Version 0.2": [[105, "version-0-2"]], "Version 0.3": [[106, "version-0-3"]], "Version 0.4": [[107, "version-0-4"]], "Version 0.5": [[108, "version-0-5"]], "Version 0.6": [[109, "version-0-6"]], "Version 0.7": [[110, "version-0-7"]], "Version 0.8": [[111, "version-0-8"]], "Version 0.9": [[112, "version-0-9"]]}, "indexentries": {"module": [[0, "module-treeple"], [0, "module-treeple._lib.sklearn.ensemble"]], "treeple": [[0, "module-treeple"]], "treeple._lib.sklearn.ensemble": [[0, "module-treeple._lib.sklearn.ensemble"]], "extendedisolationforest (class in treeple)": [[45, "treeple.ExtendedIsolationForest"]], "decision_function() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.decision_function"]], "estimators_samples_ (treeple.extendedisolationforest property)": [[45, "treeple.ExtendedIsolationForest.estimators_samples_"]], "fit() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.fit"]], "fit_predict() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.fit_predict"]], "get_metadata_routing() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.get_metadata_routing"]], "get_params() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.get_params"]], "predict() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.predict"]], "score_samples() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.score_samples"]], "set_fit_request() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.set_fit_request"]], "set_params() (treeple.extendedisolationforest method)": [[45, "treeple.ExtendedIsolationForest.set_params"]], "extratreesclassifier (class in treeple)": [[46, "treeple.ExtraTreesClassifier"]], "apply() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.apply"]], "decision_path() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (treeple.extratreesclassifier property)": [[46, "treeple.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (treeple.extratreesclassifier property)": [[46, "treeple.ExtraTreesClassifier.feature_importances_"]], "fit() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.get_params"]], "partial_fit() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.partial_fit"]], "predict() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.predict"]], "predict_log_proba() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.predict_quantiles"]], "score() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.score"]], "set_fit_request() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.set_fit_request"]], "set_params() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (treeple.extratreesclassifier method)": [[46, "treeple.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in treeple)": [[47, "treeple.ExtraTreesRegressor"]], "apply() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.apply"]], "decision_path() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (treeple.extratreesregressor property)": [[47, "treeple.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (treeple.extratreesregressor property)": [[47, "treeple.ExtraTreesRegressor.feature_importances_"]], "fit() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.get_params"]], "predict() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.predict"]], "predict_quantiles() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.predict_quantiles"]], "score() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.score"]], "set_fit_request() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.set_fit_request"]], "set_params() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.set_params"]], "set_score_request() (treeple.extratreesregressor method)": [[47, "treeple.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in treeple)": [[48, "treeple.HonestForestClassifier"]], "apply() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.apply"]], "decision_path() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.decision_path"]], "estimators_samples_ (treeple.honestforestclassifier property)": [[48, "treeple.HonestForestClassifier.estimators_samples_"]], "feature_importances_ (treeple.honestforestclassifier property)": [[48, "treeple.HonestForestClassifier.feature_importances_"]], "fit() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.fit"]], "get_leaf_node_samples() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.get_metadata_routing"]], "get_params() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.get_params"]], "honest_indices_ (treeple.honestforestclassifier property)": [[48, "treeple.HonestForestClassifier.honest_indices_"]], "oob_samples_ (treeple.honestforestclassifier property)": [[48, "treeple.HonestForestClassifier.oob_samples_"]], "partial_fit() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.partial_fit"]], "predict() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.predict"]], "predict_log_proba() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.predict_log_proba"]], "predict_proba() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.predict_quantiles"]], "score() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.score"]], "set_fit_request() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.set_fit_request"]], "set_params() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.set_params"]], "set_partial_fit_request() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (treeple.honestforestclassifier method)": [[48, "treeple.HonestForestClassifier.set_score_request"]], "structure_indices_ (treeple.honestforestclassifier property)": [[48, "treeple.HonestForestClassifier.structure_indices_"]], "multiviewrandomforestclassifier (class in treeple)": [[49, "treeple.MultiViewRandomForestClassifier"]], "apply() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.apply"]], "compute_similarity_matrix() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.decision_path"]], "estimators_samples_ (treeple.multiviewrandomforestclassifier property)": [[49, "treeple.MultiViewRandomForestClassifier.estimators_samples_"]], "feature_importances_ (treeple.multiviewrandomforestclassifier property)": [[49, "treeple.MultiViewRandomForestClassifier.feature_importances_"]], "fit() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.fit"]], "get_leaf_node_samples() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.get_metadata_routing"]], "get_params() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.get_params"]], "oob_samples_ (treeple.multiviewrandomforestclassifier property)": [[49, "treeple.MultiViewRandomForestClassifier.oob_samples_"]], "partial_fit() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.partial_fit"]], "predict() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.predict"]], "predict_log_proba() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.predict_log_proba"]], "predict_proba() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.predict_quantiles"]], "score() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.score"]], "set_fit_request() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.set_fit_request"]], "set_params() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.set_params"]], "set_partial_fit_request() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (treeple.multiviewrandomforestclassifier method)": [[49, "treeple.MultiViewRandomForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in treeple)": [[50, "treeple.NearestNeighborsMetaEstimator"]], "fit() (treeple.nearestneighborsmetaestimator method)": [[50, "treeple.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (treeple.nearestneighborsmetaestimator method)": [[50, "treeple.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (treeple.nearestneighborsmetaestimator method)": [[50, "treeple.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (treeple.nearestneighborsmetaestimator method)": [[50, "treeple.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (treeple.nearestneighborsmetaestimator method)": [[50, "treeple.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (treeple.nearestneighborsmetaestimator method)": [[50, "treeple.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in treeple)": [[51, "treeple.ObliqueRandomForestClassifier"]], "apply() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (treeple.obliquerandomforestclassifier property)": [[51, "treeple.ObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (treeple.obliquerandomforestclassifier property)": [[51, "treeple.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.get_params"]], "oob_samples_ (treeple.obliquerandomforestclassifier property)": [[51, "treeple.ObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.partial_fit"]], "predict() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.score"]], "set_fit_request() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (treeple.obliquerandomforestclassifier method)": [[51, "treeple.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in treeple)": [[52, "treeple.ObliqueRandomForestRegressor"]], "apply() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (treeple.obliquerandomforestregressor property)": [[52, "treeple.ObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (treeple.obliquerandomforestregressor property)": [[52, "treeple.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.get_params"]], "oob_samples_ (treeple.obliquerandomforestregressor property)": [[52, "treeple.ObliqueRandomForestRegressor.oob_samples_"]], "predict() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.score"]], "set_fit_request() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (treeple.obliquerandomforestregressor method)": [[52, "treeple.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in treeple)": [[53, "treeple.PatchObliqueRandomForestClassifier"]], "apply() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (treeple.patchobliquerandomforestclassifier property)": [[53, "treeple.PatchObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (treeple.patchobliquerandomforestclassifier property)": [[53, "treeple.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.get_params"]], "oob_samples_ (treeple.patchobliquerandomforestclassifier property)": [[53, "treeple.PatchObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (treeple.patchobliquerandomforestclassifier method)": [[53, "treeple.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in treeple)": [[54, "treeple.PatchObliqueRandomForestRegressor"]], "apply() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (treeple.patchobliquerandomforestregressor property)": [[54, "treeple.PatchObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (treeple.patchobliquerandomforestregressor property)": [[54, "treeple.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.get_params"]], "oob_samples_ (treeple.patchobliquerandomforestregressor property)": [[54, "treeple.PatchObliqueRandomForestRegressor.oob_samples_"]], "predict() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (treeple.patchobliquerandomforestregressor method)": [[54, "treeple.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in treeple)": [[55, "treeple.RandomForestClassifier"]], "apply() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.apply"]], "decision_path() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.decision_path"]], "estimators_samples_ (treeple.randomforestclassifier property)": [[55, "treeple.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (treeple.randomforestclassifier property)": [[55, "treeple.RandomForestClassifier.feature_importances_"]], "fit() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.fit"]], "get_leaf_node_samples() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.get_metadata_routing"]], "get_params() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.get_params"]], "partial_fit() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.partial_fit"]], "predict() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.predict"]], "predict_log_proba() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.predict_log_proba"]], "predict_proba() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.predict_proba"]], "predict_quantiles() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.predict_quantiles"]], "score() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.score"]], "set_fit_request() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.set_fit_request"]], "set_params() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.set_params"]], "set_partial_fit_request() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (treeple.randomforestclassifier method)": [[55, "treeple.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in treeple)": [[56, "treeple.RandomForestRegressor"]], "apply() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.apply"]], "decision_path() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.decision_path"]], "estimators_samples_ (treeple.randomforestregressor property)": [[56, "treeple.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (treeple.randomforestregressor property)": [[56, "treeple.RandomForestRegressor.feature_importances_"]], "fit() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.fit"]], "get_leaf_node_samples() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.get_metadata_routing"]], "get_params() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.get_params"]], "predict() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.predict"]], "predict_quantiles() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.predict_quantiles"]], "score() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.score"]], "set_fit_request() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.set_fit_request"]], "set_params() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.set_params"]], "set_score_request() (treeple.randomforestregressor method)": [[56, "treeple.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in treeple)": [[57, "treeple.UnsupervisedObliqueRandomForest"]], "apply() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.apply"]], "compute_similarity_matrix() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.decision_path"]], "estimators_samples_ (treeple.unsupervisedobliquerandomforest property)": [[57, "treeple.UnsupervisedObliqueRandomForest.estimators_samples_"]], "feature_importances_ (treeple.unsupervisedobliquerandomforest property)": [[57, "treeple.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.get_params"]], "predict() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.set_params"]], "transform() (treeple.unsupervisedobliquerandomforest method)": [[57, "treeple.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in treeple)": [[58, "treeple.UnsupervisedRandomForest"]], "apply() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.apply"]], "compute_similarity_matrix() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.decision_path"]], "estimators_samples_ (treeple.unsupervisedrandomforest property)": [[58, "treeple.UnsupervisedRandomForest.estimators_samples_"]], "feature_importances_ (treeple.unsupervisedrandomforest property)": [[58, "treeple.UnsupervisedRandomForest.feature_importances_"]], "fit() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.fit"]], "fit_predict() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.get_params"]], "predict() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.predict"]], "predict_quantiles() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.set_fit_request"]], "set_output() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.set_output"]], "set_params() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.set_params"]], "transform() (treeple.unsupervisedrandomforest method)": [[58, "treeple.UnsupervisedRandomForest.transform"]], "approximate_clf_mutual_information() (in module treeple.datasets)": [[59, "treeple.datasets.approximate_clf_mutual_information"]], "approximate_clf_mutual_information_with_monte_carlo() (in module treeple.datasets)": [[60, "treeple.datasets.approximate_clf_mutual_information_with_monte_carlo"]], "make_gaussian_mixture() (in module treeple.datasets)": [[61, "treeple.datasets.make_gaussian_mixture"]], "make_joint_factor_model() (in module treeple.datasets)": [[62, "treeple.datasets.make_joint_factor_model"]], "make_marron_wand_classification() (in module treeple.datasets)": [[63, "treeple.datasets.make_marron_wand_classification"]], "make_quadratic_classification() (in module treeple.datasets)": [[64, "treeple.datasets.make_quadratic_classification"]], "make_trunk_classification() (in module treeple.datasets)": [[65, "treeple.datasets.make_trunk_classification"]], "make_trunk_mixture_classification() (in module treeple.datasets)": [[66, "treeple.datasets.make_trunk_mixture_classification"]], "conditional_resample() (in module treeple.experimental)": [[67, "treeple.experimental.conditional_resample"]], "cmi_gaussian() (in module treeple.experimental.mutual_info)": [[68, "treeple.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module treeple.experimental.mutual_info)": [[69, "treeple.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module treeple.experimental.mutual_info)": [[70, "treeple.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module treeple.experimental)": [[71, "treeple.experimental.mutual_info_ksg"]], "simulate_helix() (in module treeple.experimental.simulate)": [[72, "treeple.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module treeple.experimental.simulate)": [[73, "treeple.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module treeple.experimental.simulate)": [[74, "treeple.experimental.simulate.simulate_sphere"]], "permutationhonestforestclassifier (class in treeple.stats)": [[75, "treeple.stats.PermutationHonestForestClassifier"]], "apply() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.apply"]], "decision_path() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.decision_path"]], "estimators_samples_ (treeple.stats.permutationhonestforestclassifier property)": [[75, "treeple.stats.PermutationHonestForestClassifier.estimators_samples_"]], "feature_importances_ (treeple.stats.permutationhonestforestclassifier property)": [[75, "treeple.stats.PermutationHonestForestClassifier.feature_importances_"]], "fit() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.fit"]], "get_leaf_node_samples() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.get_metadata_routing"]], "get_params() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.get_params"]], "honest_indices_ (treeple.stats.permutationhonestforestclassifier property)": [[75, "treeple.stats.PermutationHonestForestClassifier.honest_indices_"]], "oob_samples_ (treeple.stats.permutationhonestforestclassifier property)": [[75, "treeple.stats.PermutationHonestForestClassifier.oob_samples_"]], "partial_fit() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.partial_fit"]], "predict() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.predict"]], "predict_log_proba() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.predict_log_proba"]], "predict_proba() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.predict_quantiles"]], "score() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.score"]], "set_fit_request() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.set_fit_request"]], "set_params() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.set_params"]], "set_partial_fit_request() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.set_partial_fit_request"]], "set_score_request() (treeple.stats.permutationhonestforestclassifier method)": [[75, "treeple.stats.PermutationHonestForestClassifier.set_score_request"]], "structure_indices_ (treeple.stats.permutationhonestforestclassifier property)": [[75, "treeple.stats.PermutationHonestForestClassifier.structure_indices_"]], "build_coleman_forest() (in module treeple.stats)": [[76, "treeple.stats.build_coleman_forest"]], "build_cv_forest() (in module treeple.stats)": [[77, "treeple.stats.build_cv_forest"]], "build_oob_forest() (in module treeple.stats)": [[78, "treeple.stats.build_oob_forest"]], "build_permutation_forest() (in module treeple.stats)": [[79, "treeple.stats.build_permutation_forest"]], "decisiontreeclassifier (class in treeple.tree)": [[80, "treeple.tree.DecisionTreeClassifier"]], "apply() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (treeple.tree.decisiontreeclassifier property)": [[80, "treeple.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.fit"]], "get_depth() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.get_params"]], "partial_fit() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.partial_fit"]], "predict() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.predict_proba"]], "predict_quantiles() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.predict_quantiles"]], "score() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.score"]], "set_fit_request() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.set_params"]], "set_partial_fit_request() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (treeple.tree.decisiontreeclassifier method)": [[80, "treeple.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in treeple.tree)": [[81, "treeple.tree.DecisionTreeRegressor"]], "apply() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (treeple.tree.decisiontreeregressor property)": [[81, "treeple.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.fit"]], "get_depth() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.get_params"]], "predict() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.predict"]], "predict_quantiles() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.predict_quantiles"]], "score() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.score"]], "set_fit_request() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (treeple.tree.decisiontreeregressor method)": [[81, "treeple.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in treeple.tree)": [[82, "treeple.tree.ExtraTreeClassifier"]], "apply() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (treeple.tree.extratreeclassifier property)": [[82, "treeple.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.fit"]], "get_depth() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.get_depth"]], "get_leaf_node_samples() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.get_params"]], "partial_fit() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.partial_fit"]], "predict() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.predict_proba"]], "predict_quantiles() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.predict_quantiles"]], "score() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.score"]], "set_fit_request() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.set_params"]], "set_partial_fit_request() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (treeple.tree.extratreeclassifier method)": [[82, "treeple.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in treeple.tree)": [[83, "treeple.tree.ExtraTreeRegressor"]], "apply() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (treeple.tree.extratreeregressor property)": [[83, "treeple.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.fit"]], "get_depth() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.get_depth"]], "get_leaf_node_samples() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.get_params"]], "predict() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.predict"]], "predict_quantiles() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.predict_quantiles"]], "score() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.score"]], "set_fit_request() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (treeple.tree.extratreeregressor method)": [[83, "treeple.tree.ExtraTreeRegressor.set_score_request"]], "honesttreeclassifier (class in treeple.tree)": [[84, "treeple.tree.HonestTreeClassifier"]], "apply() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (treeple.tree.honesttreeclassifier property)": [[84, "treeple.tree.HonestTreeClassifier.feature_importances_"]], "fit() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.fit"]], "get_depth() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.get_params"]], "partial_fit() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.partial_fit"]], "predict() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.predict"]], "predict_proba() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.predict_quantiles"]], "score() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.score"]], "set_fit_request() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (treeple.tree.honesttreeclassifier method)": [[84, "treeple.tree.HonestTreeClassifier.set_score_request"]], "multiviewdecisiontreeclassifier (class in treeple.tree)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier"]], "apply() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.decision_path"]], "feature_importances_ (treeple.tree.multiviewdecisiontreeclassifier property)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.feature_importances_"]], "fit() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.fit"]], "get_depth() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.get_n_leaves"]], "get_params() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.get_params"]], "partial_fit() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.partial_fit"]], "predict() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.predict"]], "predict_log_proba() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.predict_quantiles"]], "score() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.score"]], "set_fit_request() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.set_fit_request"]], "set_params() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.set_predict_request"]], "set_score_request() (treeple.tree.multiviewdecisiontreeclassifier method)": [[85, "treeple.tree.MultiViewDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in treeple.tree)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier"]], "apply() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (treeple.tree.obliquedecisiontreeclassifier property)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (treeple.tree.obliquedecisiontreeclassifier method)": [[86, "treeple.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in treeple.tree)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor"]], "apply() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (treeple.tree.obliquedecisiontreeregressor property)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (treeple.tree.obliquedecisiontreeregressor method)": [[87, "treeple.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in treeple.tree)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (treeple.tree.patchobliquedecisiontreeclassifier property)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (treeple.tree.patchobliquedecisiontreeclassifier method)": [[88, "treeple.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in treeple.tree)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (treeple.tree.patchobliquedecisiontreeregressor property)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (treeple.tree.patchobliquedecisiontreeregressor method)": [[89, "treeple.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in treeple.tree)": [[90, "treeple.tree.UnsupervisedDecisionTree"]], "apply() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (treeple.tree.unsuperviseddecisiontree property)": [[90, "treeple.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.get_params"]], "predict() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (treeple.tree.unsuperviseddecisiontree method)": [[90, "treeple.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in treeple.tree)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree"]], "apply() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (treeple.tree.unsupervisedobliquedecisiontree property)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (treeple.tree.unsupervisedobliquedecisiontree method)": [[91, "treeple.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module treeple.tree)": [[92, "treeple.tree.compute_forest_similarity_matrix"]]}})